diff --git a/scripts/dives.py b/scripts/dives.py
index b9d44a6..cdc05eb 100644
--- a/scripts/dives.py
+++ b/scripts/dives.py
@@ -47,6 +47,7 @@ class Dive:
             self.log_content = f.read()
 
         # Get the last date
+        print self.log_name
         ed = re.findall("(\d+):", utils.split_log_lines(self.log_content)[-1])[0]
         self.end_date = UTCDateTime(int(ed))
 
diff --git a/scripts/events.py b/scripts/events.py
index f2658ee..6bd5643 100644
--- a/scripts/events.py
+++ b/scripts/events.py
@@ -1,3 +1,10 @@
+# Written by Sebastien Bonnieux.
+# Last modified by jdsimon@princeton.edu,  20-Aug-2018.
+
+# Change log -
+#
+# 20-Aug-2018: Added stats.sac["user2"] = self.trig
+
 import os
 import glob
 import re
@@ -88,6 +95,7 @@ class Event:
         # Get the frequency recorded in the .MER environment header
         fs_catch = re.findall("TRUE_SAMPLE_FREQ FS_Hz=(\d+\.\d+)", self.environment)
         self.measured_fs = float(fs_catch[0])
+        #self.measured_fs = 40
 
         # Divide frequency by number of scales
         int_scl = int(self.scales)
@@ -204,14 +212,15 @@ class Event:
         export_path = export_path + self.get_export_file_name() + ".png"
         if os.path.exists(export_path):
             return
+        data = [d/(10**((-201.+25.)/20.) * 2 * 2**28/5. * 1000000) for d in self.data]
         # Plot frequency image
         plt.figure(figsize=(9, 4))
         plt.title(self.__get_figure_title(), fontsize=12)
         plt.plot(utils.get_time_array(len(self.data), 1./self.decimated_fs),
-                 self.data,
+                 data,
                  color='b')
         plt.xlabel("Time (s)", fontsize=12)
-        plt.ylabel("Counts", fontsize=12)
+        plt.ylabel("Pascal", fontsize=12)
         plt.tight_layout()
         plt.grid()
         plt.savefig(export_path)
@@ -278,6 +287,7 @@ class Event:
         stats.sac["stdp"] = self.depth
         stats.sac["user0"] = self.snr
         stats.sac["user1"] = self.criterion
+        stats.sac["user2"] = self.trig
         stats.sac["iztype"] = 9  # 9 == IB in sac format
 
         # Save data into a Stream object
diff --git a/scripts/main.py b/scripts/main.py
index 6e84527..67704f7 100644
--- a/scripts/main.py
+++ b/scripts/main.py
@@ -8,6 +8,7 @@ import vitals
 import kml
 import re
 import utils
+import pickle
 
 # Set a time range of analysis for a specific float
 filterDate = {
@@ -15,7 +16,7 @@ filterDate = {
     "452.112-N-02": (datetime.datetime(2018, 12, 28), datetime.datetime(2100, 1, 1)),
     "452.112-N-03": (datetime.datetime(2018, 4, 9), datetime.datetime(2100, 1, 1)),
     "452.112-N-04": (datetime.datetime(2019, 1, 3), datetime.datetime(2100, 1, 1)),
-    "452.112-N-05": (datetime.datetime(2019, 1, 3), datetime.datetime(2100, 1, 1)),
+    #"452.112-N-05": (datetime.datetime(2019, 1, 3), datetime.datetime(2100, 1, 1)),
     "452.020-P-06": (datetime.datetime(2018, 6, 26), datetime.datetime(2100, 1, 1)),
     "452.020-P-07": (datetime.datetime(2018, 6, 27), datetime.datetime(2100, 1, 1)),
     "452.020-P-08": (datetime.datetime(2018, 8, 5), datetime.datetime(2100, 1, 1)),
@@ -34,10 +35,11 @@ filterDate = {
     "452.020-P-23": (datetime.datetime(2018, 9, 12), datetime.datetime(2100, 1, 1)),
     "452.020-P-24": (datetime.datetime(2018, 9, 13), datetime.datetime(2100, 1, 1)),
     "452.020-P-25": (datetime.datetime(2018, 9, 14), datetime.datetime(2100, 1, 1)),
-    "452.020-P-0050": (datetime.datetime(2019, 8, 1), datetime.datetime(2100, 1, 1)),
-    "452.020-P-0052": (datetime.datetime(2019, 8, 1), datetime.datetime(2100, 1, 1)),
-    "452.020-P-0053": (datetime.datetime(2019, 8, 1), datetime.datetime(2100, 1, 1)),
-    "452.020-P-0054": (datetime.datetime(2019, 8, 1), datetime.datetime(2100, 1, 1))
+    "452.020-P-0050": (datetime.datetime(2019, 8, 11), datetime.datetime(2100, 1, 1)),
+    #"452.020-P-0051": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
+    "452.020-P-0052": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
+    "452.020-P-0053": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
+    "452.020-P-0054": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1))
 }
 
 # Boolean set to true in order to delete every processed data and redo everything
@@ -46,13 +48,15 @@ redo = False
 # Plot interactive figures in HTML format for acoustic events
 # WARNING: Plotly files takes a lot of memory so commented by default
 events_plotly = False
-events_mseed = True
+events_mseed = False
 events_sac = True
 events_png = True
 
 # Path for input datas
 dataPath = "server"
 
+# Dictionary to save data in a file
+datasave = dict()
 
 def main():
     # Set working directory in "scripts"
@@ -91,8 +95,9 @@ def main():
 
         # Copy appropriate files in the directory and remove files outside of the time range
         files_to_copy = list()
-        files_to_copy += glob.glob("../" + dataPath + "/" + mfloat_nb + "*.LOG")
-        files_to_copy += glob.glob("../" + dataPath + "/" + mfloat_nb + "*.MER")
+        extensions = ["000", "001", "002", "003", "004", "005", "LOG", "MER"]
+        for extension in extensions:
+            files_to_copy += glob.glob("../" + dataPath + "/" + mfloat_nb + "*." + extension)
         if mfloat in filterDate.keys():
             begin = filterDate[mfloat][0]
             end = filterDate[mfloat][1]
@@ -163,6 +168,21 @@ def main():
         for f in glob.glob(mfloat_path + "/" + mfloat_nb + "_*.MER"):
             os.remove(f)
 
+        # Put dive in a variable that will be saved in a file
+        datasave[mfloat] = mdives
+
+    with open("../processed/MerDives.pydata", 'wb') as f:
+        pickle.dump(datasave, f)
+
+        # for dive in mdives[:-1]: # on ne regarde pas la derniere plongee qui n'a pas ete interpolee
+        #    if dive.is_complete_dive: # on ne regarde que les vraies plongees (pas les tests faits a terre)
+        #        print dive.log_name
+        #        for gps in dive.gps_list[0:-1]: # point GPS avant de descendre
+        #            print gps.date
+        #        print dive.surface_leave_loc.date
+        #        print dive.great_depth_reach_loc.date
+        #        print dive.great_depth_leave_loc.date
+        #        print dive.gps_list[-1].date # point GPS en arrivant en surface
 
 if __name__ == "__main__":
     main()
diff --git a/scripts/utils.py b/scripts/utils.py
index 57a9a98..c7d4cbf 100644
--- a/scripts/utils.py
+++ b/scripts/utils.py
@@ -52,7 +52,7 @@ def format_log(log):
 
 # Get date from a .LOG or a .MER file name
 def get_date_from_file_name(filename):
-    hexdate = re.findall("(.+\d+_)?([A-Z0-9]+)\.(LOG|MER)", filename)[0][1]
+    hexdate = re.findall("(.+\d+_)?([A-Z0-9]+)\.(LOG|MER|\d{3})", filename)[0][1]
     timestamp = int(hexdate, 16)
     return UTCDateTime(timestamp)
 
diff --git a/scripts/vitals.py b/scripts/vitals.py
index 036e6e0..37911e7 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -26,9 +26,9 @@ def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
  
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
-    voltage = voltage[i:j]
-    minimum_voltage = minimum_voltage[i:j]
+    date = date[i:j+1]
+    voltage = voltage[i:j+1]
+    minimum_voltage = minimum_voltage[i:j+1]
 
     # Add battery values to the graph
     voltage_line = graph.Scatter(x=date,
@@ -78,8 +78,8 @@ def plot_internal_pressure(vital_file_path, vital_file_name, begin, end):
     j = 0
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
-    internal_pressure = internal_pressure[i:j]
+    date = date[i:j+1]
+    internal_pressure = internal_pressure[i:j+1]
 
     # Add battery values to the graph
     internal_pressure_line = graph.Scatter(x=date,
@@ -130,10 +130,10 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     j = 0
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
+    date = date[i:j+1]
     date_rev = date[::-1]
     pressure_offset = pressure_offset[i:j]
-    pressure_offset_range = pressure_offset_range[i:j]
+    pressure_offset_range = pressure_offset_range[i:j+1]
     pressure_offset_max = [x + y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min = [x - y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min_rev = pressure_offset_min[::-1]
@@ -184,8 +184,8 @@ def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
 
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
-    pressure_offset = pressure_offset[i:j]
+    date = date[i:j+1]
+    pressure_offset = pressure_offset[i:j+1]
 
     # Add battery values to the graph
     pressure_offset_line = graph.Scatter(x=date,
