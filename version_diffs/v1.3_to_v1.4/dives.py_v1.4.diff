diff --git a/scripts/dives.py b/scripts/dives.py
index 75397ac..455e409 100644
--- a/scripts/dives.py
+++ b/scripts/dives.py
@@ -4,7 +4,7 @@
 # Original author: Sebastien Bonnieux
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 05-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 13-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import glob
@@ -56,7 +56,6 @@ class Dive:
     next_dive_exists = False
 
     def __init__(self, base_path, log_name, events):
-
         self.base_path = base_path
         self.log_name = log_name
         self.__version__ = version
@@ -71,8 +70,13 @@ class Dive:
         with open(self.base_path + self.log_name, "r") as f:
             self.log_content = f.read()
 
-        # Get the last date
+        # Get the last date (last line of the log file)
+        #
+        # Unfortunately, .LOG files can also suffer from incomplete transmission
+        # and I do not yet know how to get around that; if this line fails wait
+        # until next surfacing to rerun automaid until a fix is found
         ed = re.findall("(\d+):", utils.split_log_lines(self.log_content)[-1])[0]
+
         self.end_date = UTCDateTime(int(ed))
         self.dive_length = self.end_date - self.date # seconds
 
@@ -145,9 +149,9 @@ class Dive:
 
             # Warning if .MER transmission is incomplete
             if not self.mmd_file_is_complete:
-                print("WARNING: MER file transmission is incomplete, do not invert SAC/mSEED using {:s}" \
+                print("WARNING: {:s} file transmission is incomplete" \
                       .format(self.mmd_environment_name))
-                print("      Expected {:>6d} bytes (according to {:s})\n      Received {:>6d} bytes"\
+                print("         Expected {:>6d} bytes (according to {:s})\n         Received {:>6d} bytes"\
                       .format(self.mmd_bytes_expected, self.log_name, self.mmd_bytes_received))
 
             # Read the Mermaid environment associated to the dive
@@ -223,10 +227,6 @@ class Dive:
         if os.path.exists(export_path):
             return
 
-        # Return in the .MER file is incomplete (transmission failure)
-        if not self.mmd_file_is_complete:
-            return
-
         # Write file
         with open(export_path, "w") as f:
             f.write(self.mmd_environment)
@@ -241,10 +241,6 @@ class Dive:
         if not self.is_dive:
             return
 
-        # Return in the .MER file is incomplete (transmission failure)
-        if not self.mmd_file_is_complete:
-            return
-
         # Search pressure values
         pressure = utils.find_timestamped_values("P\s*(\+?\-?\d+)mbar", self.log_content)
         bypass = utils.find_timestamped_values(":\[BYPASS", self.log_content)
@@ -476,19 +472,19 @@ class Dive:
 
     def generate_events_plotly(self):
         for event in self.events:
-            event.plotly(self.export_path, force_with_incomplete_mmd=False)
+            event.plotly(self.export_path)
 
     def generate_events_png(self):
         for event in self.events:
-            event.plot_png(self.export_path, force_with_incomplete_mmd=False)
+            event.plot_png(self.export_path)
 
     def generate_events_sac(self):
         for event in self.events:
-            event.to_sac(self.export_path, self.station_number, force_without_loc=False, force_with_incomplete_mmd=False)
+            event.to_sac(self.export_path, self.station_number, force_without_loc=False)
 
     def generate_events_mseed(self):
         for event in self.events:
-            event.to_mseed(self.export_path, self.station_number, force_without_loc=False, force_with_incomplete_mmd=False)
+            event.to_mseed(self.export_path, self.station_number, force_without_loc=False)
 
     def print_dive_length(self):
         dive_length_days = self.dive_length / (60*60*24)
@@ -524,13 +520,9 @@ class Dive:
                     print("  Event: ! NOT MADE (not enough GPS fixes) {:s}.sac (</EVENT> binary in {:s})" \
                           .format(e.get_export_file_name(), e.mmd_data_name))
                 else:
-                    if not e.mmd_file_is_complete:
-                        print("  Event: ! NOT MADE (incomplete .MER file) {:s}.sac (</EVENT> binary in {:s})" \
-                              .format(e.get_export_file_name(), e.mmd_data_name))
-                    else:
-                        print("  Event: {:s}.sac (</EVENT> binary in {:s})" \
-                              .format(e.get_export_file_name(), e.mmd_data_name))
-                        self.sac_count += 1
+                    print("  Event: {:s}.sac (</EVENT> binary in {:s})" \
+                          .format(e.get_export_file_name(), e.mmd_data_name))
+                    self.sac_count += 1
 
 
 # Create dives object
@@ -576,7 +568,17 @@ def concatenate_log_files(path):
                 logstring = ""
 
 def attach_mmd_is_complete_to_dive_events(dive_list):
-    """Intakes a list of Dive instances and updates their events.mmd_file_is_complete
+    """Prior to automaid v1.4.0 this method was used to determine which .MER files
+    had to be skipped (if the file was incomplete, all events contained in the
+    .MER file were ignored).  However, events.py now verifies that each
+    individual event block (<EVENT> ... int32 ... </EVENT>) contains the
+    expected number of bytes, per that event's header.  Therefore, individual
+    events in an incomplete .MER file may be converted before the entire .MER
+    file has been transmitted.  Therefore, while this method may still have some
+    future utility, it is no longer used to determine which events to make.
+
+    Original description:
+    Intakes a list of Dive instances and updates their events.mmd_file_is_complete
     field (events is a list of events associated with each dive).
 
     More verbose: each Dive instance is associated with a single .MER file via
@@ -600,6 +602,6 @@ def attach_mmd_is_complete_to_dive_events(dive_list):
 
     # Attach completeness metric to each event
     for d in dive_list:
-         for e in d.events:
+        for e in d.events:
             if e.mmd_data_name is not None:
                 e.mmd_file_is_complete = mmd_dict[e.mmd_data_name]
