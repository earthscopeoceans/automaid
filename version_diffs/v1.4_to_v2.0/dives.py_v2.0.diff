diff --git a/scripts/dives.py b/scripts/dives.py
index 455e409..3a79e51 100644
--- a/scripts/dives.py
+++ b/scripts/dives.py
@@ -4,7 +4,7 @@
 # Original author: Sebastien Bonnieux
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 13-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 16-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import glob
@@ -27,12 +27,18 @@ class Dive:
     base_path = None
     directory_name = None
     export_path = None
-    date = None
+    start_date = None
+    dive_date = None
     end_date = None
     dive_length = None
     is_init = None
     is_dive = None
     is_complete_dive = None
+    gps_list = None
+    gps_before_dive = None
+    gps_after_dive = None
+    gps_after_dive_incl_next_dive = None
+    surface_date = None
     log_content = None
     mmd_environment_name = None
     next_dive_mmd_environment_name = None
@@ -40,8 +46,6 @@ class Dive:
     events = None
     station_name = None
     station_number = None
-    gps_list = None
-    gps_list_is_complete = None
     surface_leave_loc = None
     surface_reach_loc = None
     great_depth_reach_loc = None
@@ -52,7 +56,6 @@ class Dive:
     mmd_bytes_expected = None
     mmd_file_is_complete = None
     dive_id = None
-    sac_count = 0
     next_dive_exists = False
 
     def __init__(self, base_path, log_name, events):
@@ -64,7 +67,7 @@ class Dive:
         # .LOG file name is the same Unix Epoch time as the first line of the
         # LOG file (there in int seconds); i.e., .LOG files are named for the
         # time that their first line is written
-        self.date = utils.get_date_from_file_name(log_name)
+        self.start_date = utils.get_date_from_file_name(log_name)
 
         # Read the content of the LOG
         with open(self.base_path + self.log_name, "r") as f:
@@ -76,9 +79,8 @@ class Dive:
         # and I do not yet know how to get around that; if this line fails wait
         # until next surfacing to rerun automaid until a fix is found
         ed = re.findall("(\d+):", utils.split_log_lines(self.log_content)[-1])[0]
-
         self.end_date = UTCDateTime(int(ed))
-        self.dive_length = self.end_date - self.date # seconds
+        self.dive_length = self.end_date - self.start_date # seconds
 
         # Check if the log correspond to the float initialization
         self.is_init = False
@@ -90,16 +92,20 @@ class Dive:
         self.is_dive = False
         if "[DIVING," in self.log_content:
             self.is_dive = True
+            # Hold on to the date of the dive to parse the entire dive's GPS
+            # list into into before dive/after dive sublists
+            self.dive_date = utils.find_timestamped_values("\[DIVING, *\d+\]", self.log_content)[0][1]
 
         # Check if the log correspond to a complete dive
         self.is_complete_dive = False
         if self.is_dive:
             catch = utils.find_timestamped_values("\[MAIN *, *\d+\]surface", self.log_content)
-            if len(catch) > 0:
+            if catch:
                 self.is_complete_dive = True
+                self.surface_date = UTCDateTime(catch[0][1])
 
         # Generate the directory name
-        self.directory_name = self.date.strftime("%Y%m%d-%Hh%Mm%Ss")
+        self.directory_name = self.start_date.strftime("%Y%m%d-%Hh%Mm%Ss")
         if self.is_init:
             self.directory_name += "Init"
         elif not self.is_dive:
@@ -166,7 +172,7 @@ class Dive:
             # Get list of events associated with this .MER files environment
             # (the metadata header, which does not necessarily relate to the
             # attached events and their binary data).
-            self.events = events.get_events_between(self.date, self.end_date)
+            self.events = events.get_events_between(self.start_date, self.end_date)
 
             # For each event
             for event in self.events:
@@ -179,25 +185,22 @@ class Dive:
                 # 4 Invert wavelet transform of event
                 event.invert_transform()
 
-        # Find the position of the float
+        # Collect all GPS fixes taken in both the .LOG  and .MER file
         self.gps_list, self.gps_from_log, self.gps_from_mmd_env \
             = gps.get_gps_list(self.log_name, self.log_content,  self.mmd_environment_name, self.mmd_environment)
-        self.gps_list_is_complete = False
-        if self.is_complete_dive:
-            # Check that the last GPS fix of the list correspond to the ascent position
-            surface_date = utils.find_timestamped_values("\[MAIN *, *\d+\]surface", self.log_content)
-            surface_date = UTCDateTime(surface_date[0][1])
-            if len(self.gps_list) == 0:
-                print "WARNING: No GPS synchronization at all for \"" \
-                        + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
-            elif len(self.gps_list) > 1 and self.gps_list[-1].date > surface_date:
-                self.gps_list_is_complete = True
-            elif self.gps_list[-1].date > surface_date:
+
+        # Split the GPS list into before/after dive sublists
+        if self.is_dive:
+            self.gps_before_dive = [x for x in self.gps_list if x.date < self.dive_date]
+            if not self.gps_before_dive:
                 print "WARNING: No GPS synchronization before diving for \"" \
-                        + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
-            else:
+                    + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
+
+        if self.is_complete_dive:
+            self.gps_after_dive = [x for x in self.gps_list if x.date > self.surface_date]
+            if not self.gps_after_dive:
                 print "WARNING: No GPS synchronization after surfacing for \"" \
-                        + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
+                    + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
 
         # Find the pressure offset
         if self.is_complete_dive:
@@ -323,22 +326,22 @@ class Dive:
             print "WARNING: Events are not part of a complete dive, do not correct clock drift for \""\
                 + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
-        if not self.gps_list_is_complete:
+        if not self.gps_before_dive or not self.gps_after_dive:
             print "WARNING: GPS list is incomplete, do not correct clock drift for \""\
                 + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
-        if self.gps_list[-2].clockfreq <= 0:
+        if self.gps_before_dive[-1].clockfreq <= 0:
             print "WARNING: Error with last gps synchronization before diving, do not correct clock drift for \""\
                 + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
-        if self.gps_list[-1].clockfreq <= 0:
+        if self.gps_after_dive[0].clockfreq <= 0:
             print "WARNING: Error with first gps synchronization after ascent, do not correct clock drift for \""\
                 + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Correct clock drift
         for event in self.events:
-            event.correct_clock_drift(self.gps_list[-2], self.gps_list[-1])
+            event.correct_clock_drift(self.gps_before_dive[-1], self.gps_after_dive[0])
 
     def compute_events_station_location(self, next_dive):
         # Keep tabs on the MER/LOG files that affect the current dive's gps
@@ -354,59 +357,47 @@ class Dive:
             #       + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
-        # Check if the dive contain enough gps fix
-        if len(self.gps_list) <= 1:
-            print "WARNING: The current dive doesn't contain enough GPS fix,""" \
-                  + " do not compute event location estimation for \"" \
-                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
-            return
-
-        # Check if the next dive contain gps fix
-        if len(next_dive.gps_list) <= 1:
-            print "WARNING: The next dive doesn't contain enough GPS fix,""" \
-                  + " do not compute event location estimation for \"" \
-                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
+        # Ensure the next dive contains GPS fixes before the float actually dove
+        # again (we do probably do not want to interpolate the location for the
+        # current dive using next_dive.gps_after_dive)
+        if not next_dive.gps_list:
+            print "WARNING: The next dive doesn't contain enough GPS fixes,""" \
+                + " do not compute event location estimation for \"" \
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
-        # Warning GPS list is incomplete, do not compute event location
-        if not self.gps_list_is_complete:
-            print "WARNING: GPS list is incomplete, do not compute event location for \""\
-                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
-            return
+        # By default every .MER and .LOG prints a handful of GPS fixes BEFORE
+        # the dive, but only a single one AFTER the dive; thus to get a good
+        # interpolated location we need to append the NEXT dive's GPS list
+        # (ideally, before it dove again)
+        if next_dive.gps_before_dive:
+            self.gps_after_dive_incl_next_dive = self.gps_after_dive + next_dive.gps_before_dive
 
-        # Split the GPS list: the final GPS location in the .MER file is from
-        # the next dive (and is roughly(?) the same time as the first GPS
-        # location in the subsequent MER file).
-        gps_before_dive = self.gps_list[:-1]
-        gps_after_dive = [self.gps_list[-1]] + next_dive.gps_list[:-1]
-
-        # GPS linear interpolation requires at least two GPS fixes. By default,
-        # the GPS list is parsed from the MER file. If that list is less than
-        # length two, try parsing the (same dive) GPS list from the LOG file. If
-        # there are still less than two GPS fixes before or after the dive,
-        # return early because we cannot compute an interpolated location.
-        if len(gps_before_dive) < 2 and "MER" in self.gps_list[0].source:
-            self.gps_list = self.gps_from_log
-            gps_before_dive = self.gps_list[:-1]
-
-        if len(gps_after_dive) < 2 and "MER" in self.gps_list[0].source:
-            self.gps_list = self.gps_from_log
-            gps_after_dive = [self.gps_list[-1]] + next_dive.gps_list[:-1]
-
-        if len(gps_before_dive) < 2 or len(gps_after_dive) < 2:
-            print "WARNING: Less than two GPS fixes before or after dive, do not compute event location for \""\
-                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
+        else:
+            # Perhaps there was an error/reset that caused this .LOG not to
+            # correspond to a dive, though it still contained legit GPS points;
+            # alternatively a total failure of GPS before the next normal dive
+            # is not good, but I'd rather have a bad interpolated location than
+            # no interpolated location
+            self.gps_after_dive_incl_next_dive = self.gps_after_dive + next_dive.gps_list
+        self.gps_after_dive_incl_next_dive.sort(key=lambda x: x.date)
+
+        # Final check: interpolation requires at least two points before/after diving
+        if len(self.gps_before_dive) < 2 or len(self.gps_after_dive_incl_next_dive) < 2:
+            print "WARNING: The next dive doesn't contain enough GPS fixes,""" \
+                + " do not compute event location estimation for \"" \
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Find location when float leave the surface
         surface_leave_date = utils.find_timestamped_values("\[DIVING, *\d+\] *(\d+)mbar reached", self.log_content)
         surface_leave_date = surface_leave_date[0][1]
-        self.surface_leave_loc = gps.linear_interpolation(gps_before_dive, surface_leave_date)
+        self.surface_leave_loc = gps.linear_interpolation(self.gps_before_dive, surface_leave_date)
 
         # Find location when float reach the surface
         surface_reach_date = utils.find_timestamped_values("\[SURFIN, *\d+\]filling external bladder", self.log_content)
         surface_reach_date = surface_reach_date[-1][1]
-        self.surface_reach_loc = gps.linear_interpolation(gps_after_dive, surface_reach_date)
+        self.surface_reach_loc =  gps.linear_interpolation(self.gps_after_dive_incl_next_dive , surface_reach_date)
 
         # Location is determined when the float reach the mixed layer depth
         mixed_layer_depth_m = 50
@@ -439,7 +430,6 @@ class Dive:
             d1 = surface_leave_date
             p1 = 0
 
-
         # compute when the float pass under the mixed layer
         reach_great_depth_date = d1 + (mixed_layer_depth_m - p1) * (d2 - d1) / (p2 - p1)
 
@@ -463,8 +453,8 @@ class Dive:
         leave_great_depth_date = d1 + (mixed_layer_depth_m - p1) * (d2 - d1) / (p2 - p1)
 
         # compute location with linear interpolation
-        self.great_depth_reach_loc = gps.linear_interpolation(gps_before_dive, reach_great_depth_date)
-        self.great_depth_leave_loc = gps.linear_interpolation(gps_after_dive, leave_great_depth_date)
+        self.great_depth_reach_loc = gps.linear_interpolation(self.gps_before_dive, reach_great_depth_date)
+        self.great_depth_leave_loc = gps.linear_interpolation(self.gps_after_dive_incl_next_dive, leave_great_depth_date)
 
         # compute location of events
         for event in self.events:
@@ -489,7 +479,7 @@ class Dive:
     def print_dive_length(self):
         dive_length_days = self.dive_length / (60*60*24)
         print("   Date: {:s} -> {:s} ({:.1f} days; first/last line of {:s})" \
-              .format(str(self.date)[0:19], str(self.end_date)[0:19], dive_length_days, self.log_name))
+              .format(str(self.start_date)[0:19], str(self.end_date)[0:19], dive_length_days, self.log_name))
 
     def print_dive_gps(self, next_dive):
         # By definition 1 .LOG == 1 "dive," so there is always a .log file but
@@ -522,8 +512,6 @@ class Dive:
                 else:
                     print("  Event: {:s}.sac (</EVENT> binary in {:s})" \
                           .format(e.get_export_file_name(), e.mmd_data_name))
-                    self.sac_count += 1
-
 
 # Create dives object
 def get_dives(path, events):
