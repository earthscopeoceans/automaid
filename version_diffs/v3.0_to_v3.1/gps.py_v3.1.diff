diff --git a/scripts/gps.py b/scripts/gps.py
index d24244a..d0e725e 100644
--- a/scripts/gps.py
+++ b/scripts/gps.py
@@ -4,7 +4,7 @@
 # Original author: Sebastien Bonnieux
 # Current maintainer: Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 02-Nov-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 05-Nov-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import re
 import setup
@@ -33,8 +33,8 @@ class GPS:
 
 
     def __repr__(self):
-        # I don't want to print the entire (large) interpolation dict
         if self.source == 'interpolated':
+            # I don't want to print the entire (large) interpolation dict
             rep = "GPS({}, {}, {}, {}, {}, {}, {}, '{}', <interp_dict>)" \
                   .format(repr(self.date), self.latitude, self.longitude, self.clockdrift,
                           self.clockfreq, self.hdop, self.vdop, self.source)
@@ -44,11 +44,109 @@ class GPS:
                           self.clockfreq, self.hdop, self.vdop, self.source)
         return rep
 
+    def __len__(self):
+        return 1
+
 def linear_interpolation(gps_list, date):
-    # Check if date is equal to a gps fix
+    '''linear_interpolation(gps_list, date)
+
+    Attempts to interpolate for the location of MERMAID at the requested date given an input list of
+    GPS instances.  If a single GPS instance is give as input, interpolation cannot be performed and
+    the input is returned (the interpolation is fixed to the input).
+
+    Only two GPS instances from the input GPS list are retained for interpolation, and, if possible
+    this method retains only the first two GPS instances that are separated by more than 10 minutes.
+    If the two retained locations are within 20 m of one another interpolation is not performed and
+    the interpolated location is fixed to an input.
+
+    The interpolation dictionary, ".interp_dict", attached to each instance attempts to explain the
+    outcome of this method.
+
+    '''
+
+    # Defaults for the interpolation dictionary to be attached to this GPS instance
+    i = None
+    j = None
+
+    # "input" -- difference between first and last locations retained (which may not even be actual
+    # GPS fixes in the cases when the input is already an interpolated point)
+    input_drift_dist_m = None
+    input_drift_time = None
+    input_drift_vel_ms = None
+    input_lat_drift_dist_deg = None
+    input_lat_drift_vel_degs = None
+    input_lon_drift_dist_deg = None
+    input_lon_drift_vel_degs = None
+
+    # "interp" -- difference between nearest/reference GPS point and interpolation point
+    interp_drift_dist_m = None
+    interp_drift_time = None
+    interp_drift_vel_ms = None
+    interp_lat_drift_dist_deg = None
+    interp_lat_drift_vel_degs = None
+    interp_lon_drift_dist_deg = None
+    interp_lon_drift_vel_degs = None
+
+    # Return prematurely if the GPS list is not a list
+    if len(gps_list) == 1:
+        interp_lat = gps_list.latitude
+        interp_lon = gps_list.longitude
+        description = "interpolation not attempted (GPS list of length 1)"
+
+        if date == gps_list.date:
+            # Set time and drift distances to 0; leave velocities undefined
+            input_drift_dist_m = 0.0
+            input_drift_time = 0.0
+            input_lat_drift_dist_deg = 0.0
+            input_lon_drift_dist_deg = 0.0
+
+            interp_drift_dist_m = 0.0
+            interp_drift_time = 0.0
+            interp_lat_drift_dist_deg = 0.0
+            interp_lon_drift_dist_deg = 0.0
+            description = description + "; interpolation not required (interpolation date is gps_list.date)"
+
+        else:
+            description = description + "; interpolation fixed to input gps_list"
+
+        interp_dict = locals()
+
+        return GPS(date, interp_lat, interp_lon, None, None, None, None, "interpolated",
+                   interp_dict)
+
+    # Return prematurely if the requested date is included in the GPS list
     for gps in gps_list:
         if date == gps.date:
-            return gps
+            interp_lat = gps.latitude
+            interp_lon = gps.longitude
+
+            # Set time and drift distances to 0; leave velocities undefined
+            input_drift_dist_m = 0.0
+            input_drift_time = 0.0
+            input_lat_drift_dist_deg = 0.0
+            input_lon_drift_dist_deg = 0.0
+
+            interp_drift_dist_m = 0.0
+            interp_drift_time = 0.0
+            interp_lat_drift_dist_deg = 0.0
+            interp_lon_drift_dist_deg = 0.0
+            description = "interpolation not required (interpolation date in gps_list)"
+
+            interp_dict = locals()
+
+            return GPS(date, interp_lat, interp_lon, None, None, None, None, "interpolated",
+                       interp_dict)
+
+    # Otherwise, try to interpolate...
+
+    # Ensure input list is sorted
+    gps_list.sort(key=lambda x: x.date)
+
+    # Identify the reference GPS points (gps_list[i]):
+    # * last GPS before dive (descent)
+    # * last interpolated location (i.e., when it leaves surface layer and crosses into mixed layer)
+    #   before deep drift (mixed-layer drift; data acquisition phase)
+    # * first GPS after dive (ascent)
 
     # If date is before any gps fix compute drift from the two first gps fix
     if date < gps_list[0].date:
@@ -58,11 +156,12 @@ def linear_interpolation(gps_list, date):
         # Try to get a minimum time between two gps fix of 10 minutes
         while abs(gps_list[j].date - gps_list[i].date) < 10*60 and j < len(gps_list)-1:
             j += 1
-        # Try to get a minimum distance between two gps fix of 20 meters
+            # Try to get a minimum distance between two gps fix of 20 meters
         while gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude,
                                gps_list[i].latitude, gps_list[i].longitude)[0] < 20 and j < len(gps_list)-1:
             j += 1
 
+
     # If date is after any gps fix compute drift from the two last gps fix
     elif date > gps_list[-1].date:
         # In this case gps_list[i] is the LAST GPS fix BEFORE the interpolation date
@@ -71,7 +170,7 @@ def linear_interpolation(gps_list, date):
         # Try to get a minimum time between two gps fix of 10 minutes
         while abs(gps_list[j].date - gps_list[i].date) < 10 * 60 and abs(j) < len(gps_list):
             j -= 1
-        # Try to get a minimum distance between two gps fix of 20 meters
+            # Try to get a minimum distance between two gps fix of 20 meters
         while gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude,
                                gps_list[i].latitude, gps_list[i].longitude)[0] < 20 and abs(j) < len(gps_list):
             j -= 1
@@ -84,26 +183,18 @@ def linear_interpolation(gps_list, date):
             i += 1
             j += 1
 
-    # If the distance between the two GPS points retained is less than 20 m, don't interpolate just pick one
+    description= "interpolation attempted using multiple GPS points"
+
+    # If the distance between the two GPS points retained is less than 20 m, don't interpolate just
+    # pick one (also, if they are the same GPS point)
     if gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude, gps_list[i].latitude, gps_list[i].longitude)[0] < 20:
-        input_drift_dist_m = None
-        input_drift_time = None
-        input_drift_vel_ms = None
-        input_lat_drift_dist_deg = None
-        input_lat_drift_vel_degs = None
-        input_lon_drift_dist_deg = None
-        input_lon_drift_vel_degs = None
-
-        interp_drift_time = None
-        interp_lat_drift_dist_deg = None
         interp_lat = gps_list[i].latitude
-        interp_lon_drift_dist_deg = None
         interp_lon = gps_list[i].longitude
-        interp_drift_dist_m = None
-        interp_drift_vel_ms = None
+        description = description + "; retained points too close for interpolation; interpolation fixed to one of gps_list"
+
     else:
         input_drift_dist_m = gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude, \
-                                            gps_list[i].latitude, gps_list[i].longitude)[0]
+                                              gps_list[i].latitude, gps_list[i].longitude)[0]
         input_drift_time = gps_list[j].date - gps_list[i].date
         input_drift_vel_ms = input_drift_dist_m / input_drift_time
 
@@ -116,22 +207,23 @@ def linear_interpolation(gps_list, date):
         input_lon_drift_vel_degs = input_lon_drift_dist_deg / input_drift_time
 
         interp_drift_time = date - gps_list[i].date
-        interp_lat_drift_dist_deg = input_lat_drift_vel_degs * interp_drift_time
+        interp_lat_drift_vel_degs = input_lat_drift_vel_degs # they must equal
+        interp_lat_drift_dist_deg = interp_lat_drift_vel_degs * interp_drift_time
         interp_lat = gps_list[i].latitude + interp_lat_drift_dist_deg
-        interp_lon_drift_dist_deg = input_lon_drift_vel_degs * interp_drift_time
+
+        interp_lon_drift_vel_degs = input_lon_drift_vel_degs # they must equal
+        interp_lon_drift_dist_deg = interp_lon_drift_vel_degs * interp_drift_time
         interp_lon = gps_list[i].longitude + interp_lon_drift_dist_deg
 
-        # This is a bit of flub -- the interpolated drift distance computed here is using our (ever
-        # so slightly) incorrect longitude, so when projected on a sphere we get a slightly
+        # This is also a bit of flub -- the interpolated drift distance computed here is using our
+        # (ever so slightly) incorrect longitude, so when projected on a sphere we get a slightly
         # different distance than in our equal-box lat/lon projection; as such, the interpolated
         # drift velocity, which in reality must equal the drift velocity computed from the input,
         # will be slightly different
         interp_drift_dist_m = gps2dist_azimuth(interp_lat, interp_lon, gps_list[i].latitude, gps_list[i].longitude)[0]
         interp_drift_vel_ms = interp_drift_dist_m / interp_drift_time
+        description = description + "; executed successfully"
 
-    # Throw all local variables into dictionary so that I may later reference
-    # these interpolation parameters -- this is not ideal because it creates
-    # redundant records...preferrably interpolation would be its own Class
     interp_dict = locals()
 
     # Nicety: >>> from pprint import pprint
@@ -360,7 +452,7 @@ def write_gps_interpolation_txt(mdives, processed_path, mfloat_path, mfloat):
     # deeper than the mix layer depth; see especially dives.compute_station_locations and
     # gps.linear_interpolation to understand of edge-cases where perhaps some GPS fixes are missing
     # and/or MERMAID didn't dive into the mixed layer.  In all cases, GPS interpolation is still
-    # broken into three regimes: descent drift,"deep" drift, and ascent drift.  Descent drift uses
+    # broken into three regimes: descent drift, "deep" drift, and ascent drift.  Descent drift uses
     # the surface-drift velocity before the dive to interpolate forward in time for the location
     # where MERMAID dove into the mixed layer (left the surface layer); ascent drift uses the
     # surface-drift velocity after the dive to interpolate backward in time for the location where
@@ -368,41 +460,33 @@ def write_gps_interpolation_txt(mdives, processed_path, mfloat_path, mfloat):
     # of drift between those two points to estimate where MERMAID was when it recorded events while
     # drifting in the mixed layer.
 
-    # "input" to gps_linear_interpolation are those GPS instances that we give the algorithm
+    # "input" to gps.linear_interpolation are those GPS instances that we give the algorithm
     def parse_input_params(leg):
-        if leg['input_drift_time'] is not None:
-            input_params = [int(leg['input_drift_time'] ),
-                            leg['input_drift_time'] / 60.0,
-                            int(round(leg['input_drift_dist_m'])),
-                            leg['input_drift_dist_m'] /1000,
-                            leg['input_drift_vel_ms'],
-                            leg['input_drift_vel_ms'] * 3.6, # km/hr
-                            leg['input_drift_vel_ms'] * 3.6 * 24] #km/day
-            input_params = map(abs, input_params)
-            input_fmt_spec = '{:>6d}        {:>7.1f}        {:>6d}        {:>4.1f}        {:>5.2f}        {:>7.2f}        {:>7.2f}'
-        else:
-            # If the interp values are "None" that means that no interpolation was performed; a single GPS fixed used
-            input_params = [None] * 7
-            input_fmt_spec = '{:>6s}        {:>7s}        {:>6s}        {:>4s}        {:>5s}        {:>7s}        {:>7s}'
-
+        input_params = [leg['input_drift_time']               if leg['input_drift_time'] else float("Nan"),
+                        leg['input_drift_time'] / 60.0        if leg['input_drift_time'] else float("Nan"),
+                        leg['input_drift_dist_m']             if leg['input_drift_dist_m'] else float("Nan"),
+                        leg['input_drift_dist_m'] / 1000      if leg['input_drift_dist_m'] else float("Nan"),
+                        leg['input_drift_vel_ms']             if leg['input_drift_vel_ms'] else float("Nan"),
+                        leg['input_drift_vel_ms'] * 3.6       if leg['input_drift_vel_ms'] else float("Nan"), # km/hr
+                        leg['input_drift_vel_ms'] * 3.6 * 24  if leg['input_drift_vel_ms'] else float("Nan")] #km/day
+
+        input_params = map(abs, input_params)
+        input_fmt_spec = '{:>6.0f}        {:>7.1f}        {:>6.0f}        {:>4.1f}        {:>5.2f}        {:>7.2f}        {:>7.2f}'
         return (input_params, input_fmt_spec)
 
-    # "interp" from gps_linear_interpolation are those GPS instances the algorithm computes given
+    # "interp" from gps.linear_interpolation are those GPS instances the algorithm computes given
     # the input
     def parse_interp_params(leg):
-        if leg['input_drift_time'] is not None:
-            interp_params = [int(leg['interp_drift_time'] ),
-                             leg['interp_drift_time'] / 60.0,
-                             int(round(leg['interp_drift_dist_m'])),
-                             leg['interp_drift_dist_m'] /1000,
-                             leg['interp_drift_vel_ms'],
-                             leg['interp_drift_vel_ms'] * 3.6, # km/hr
-                             leg['interp_drift_vel_ms'] * 3.6 * 24] #km/day
-            interp_params = map(abs, interp_params)
-            interp_fmt_spec = '{:>6d}        {:>7.1f}        {:>6d}        {:>4.1f}        {:>5.2f}        {:>7.2f}        {:>7.2f}'
-        else:
-            interp_params = [None] * 7
-            interp_fmt_spec = '{:>6s}        {:>7s}        {:>6s}        {:>4s}        {:>5s}        {:>7s}        {:>7s}'
+        interp_params = [leg['interp_drift_time']              if leg['interp_drift_time'] else float("Nan"),
+                        leg['interp_drift_time'] / 60.0        if leg['interp_drift_time'] else float("Nan"),
+                        leg['interp_drift_dist_m']             if leg['interp_drift_dist_m'] else float("Nan"),
+                        leg['interp_drift_dist_m'] / 1000      if leg['interp_drift_dist_m'] else float("Nan"),
+                        leg['interp_drift_vel_ms']             if leg['interp_drift_vel_ms'] else float("Nan"),
+                        leg['interp_drift_vel_ms'] * 3.6       if leg['interp_drift_vel_ms'] else float("Nan"), # km/hr
+                        leg['interp_drift_vel_ms'] * 3.6 * 24  if leg['interp_drift_vel_ms'] else float("Nan")] #km/day
+
+        interp_params = map(abs, interp_params)
+        interp_fmt_spec = '{:>6.0f}        {:>7.1f}        {:>6.0f}        {:>4.1f}        {:>5.2f}        {:>7.2f}        {:>7.2f}'
 
         return (interp_params, interp_fmt_spec)
 
@@ -421,36 +505,48 @@ def write_gps_interpolation_txt(mdives, processed_path, mfloat_path, mfloat):
             f.write("DATES: {:>19s} --> {:19s}\n\n".format(str(dive.start_date)[:19] + 'Z', str(dive.end_date)[:19] + 'Z'))
             f.write("DRIFT_REGIME               TIME_S       TIME_MIN        DIST_M     DIST_KM      VEL_M/S      VEL_KM/HR     VEL_KM/DAY      DIST_%                                 SAC_MSEED_TRACE\n")
 
+
             # Compute the percentage of the total interpolate distance for the three regimes:
             # (1) surface-layer drift during the descent
             #
-            # (2) mixed_layer drift (total drift in mixed layer same for all events; use 'input' 'interp' dist...
-            #      station.loc['interp_dist_m'] is interpolated distance from leaving surface layer to event
-            #     .station.loc['input_dist_m'] is interpolated distance from leaving surface layer to returning to surface layer)
+            # (2) mixed_layer drift
+            #     .station.loc['interp_dist_m'] differs for each event  (drift to event in mixed layer)
+            #     .station.loc['input_dist_m'] same for all events (total mixed-layer drift)
             #
             # (3) surface-layer drift during the ascent
-            interp_dist_descent = dive.descent_leave_surface_loc.interp_dict['interp_drift_dist_m']
-            input_dist_mixed = dive.events[0].station_loc.interp_dict['input_drift_dist_m']
-            interp_dist_ascent = dive.ascent_reach_surface_loc.interp_dict['interp_drift_dist_m']
+            leg_descent = dive.descent_leave_surface_loc
+            interp_dist_descent = leg_descent.interp_dict['interp_drift_dist_m']
+
+            # Same for all event instances ('interp' distance to event is what differs)
+            input_dist_mixed =  dive.events[0].station_loc.interp_dict['input_drift_dist_m']
+
+            leg_ascent = dive.ascent_reach_surface_loc
+            interp_dist_ascent = leg_ascent.interp_dict['interp_drift_dist_m']
+
             if all([interp_dist_descent, input_dist_mixed, interp_dist_ascent]):
+                bad_interp = False
                 total_interp_dist = sum([interp_dist_descent, input_dist_mixed, interp_dist_ascent])
                 interp_perc_descent = (interp_dist_descent / total_interp_dist) * 100
                 input_perc_mixed = (input_dist_mixed / total_interp_dist) * 100
                 interp_perc_ascent = (interp_dist_ascent / total_interp_dist) * 100
+
             else:
+                bad_interp = True
                 interp_perc_descent = float("nan")
                 input_perc_mixed = float("nan")
                 interp_perc_ascent = float("nan")
 
             # Parse the GPS ('input') components of surface drift before dive: these are actual GPS points
-            gps_surface_descent, gps_fmt_spec = parse_input_params(dive.descent_leave_surface_loc.interp_dict)
+            gps_surface_descent, gps_fmt_spec = parse_input_params(leg_descent.interp_dict)
+
             gps_fmt_spec = "gps_surface                " + gps_fmt_spec + "\n"
             f.write(gps_fmt_spec.format(*gps_surface_descent))
 
             # Parse the interpolated components of surface drift before dive: between last GPS point
             # and crossing into mixed layer
-            interp_surface_descent, interp_fmt_spec = parse_interp_params(dive.descent_leave_surface_loc.interp_dict)
+            interp_surface_descent, interp_fmt_spec = parse_interp_params(leg_descent.interp_dict)
             interp_surface_descent.append(interp_perc_descent)
+
             interp_fmt_spec = "interp_surface             " + interp_fmt_spec + "        {:>4.1f}\n"
             f.write(interp_fmt_spec.format(*interp_surface_descent))
 
@@ -460,26 +556,46 @@ def write_gps_interpolation_txt(mdives, processed_path, mfloat_path, mfloat):
             for event in dive.events:
                 interp_drift_to_event_mixed_layer, interp_fmt_spec = parse_interp_params(event.station_loc.interp_dict)
                 interp_drift_to_event_mixed_layer.append(event.get_export_file_name())
-                interp_fmt_spec = " interp_mixed(to_event)    " + interp_fmt_spec + "                    {:>40s}\n"
 
+                interp_fmt_spec = " interp_mixed(to_event)    " + interp_fmt_spec + "                    {:>40s}\n"
                 f.write(interp_fmt_spec.format(*interp_drift_to_event_mixed_layer))
 
             # The total interpolated drift in the mixed layer -- that drift that occurs between the
             # last point of the ascent and the first point of the ascent -- is the same for every
             # event; just use the last event instance
-            total_drift_mixed_layer, interp_fmt_spec = parse_input_params(event.station_loc.interp_dict)
+            total_drift_mixed_layer, interp_fmt_spec = parse_input_params(dive.events[0].station_loc.interp_dict)
             total_drift_mixed_layer.append(input_perc_mixed)
+
             interp_fmt_spec = "interp_mixed               " + interp_fmt_spec + "        {:>4.1f}\n"
             f.write(interp_fmt_spec.format(*total_drift_mixed_layer))
 
             # Parse the interpolated components of surface drift after dive: crossing out of mixed
             # layer and recording first GPS point
-            interp_surface_ascent, interp_fmt_spec = parse_interp_params(dive.ascent_reach_surface_loc.interp_dict)
+            interp_surface_ascent, interp_fmt_spec = parse_interp_params(leg_ascent.interp_dict)
             interp_surface_ascent.append(interp_perc_ascent)
+
             interp_fmt_spec = "interp_surface             " + interp_fmt_spec + "        {:>4.1f}\n"
             f.write(interp_fmt_spec.format(*interp_surface_ascent))
 
             # Parse the GPS ('input') components of surface drift after dive: these are actual GPS points
-            gps_surface_ascent, gps_fmt_spec = parse_input_params(dive.ascent_reach_surface_loc.interp_dict)
-            gps_fmt_spec = "gps_surface                " + gps_fmt_spec + "\n\n\n"
+            gps_surface_ascent, gps_fmt_spec = parse_input_params(leg_ascent.interp_dict)
+
+            gps_fmt_spec = "gps_surface                " + gps_fmt_spec + "\n"
             f.write(gps_fmt_spec.format(*gps_surface_ascent))
+
+            # If the interpolation failed, print some helpful statements at end of block
+            if bad_interp:
+                f.write('\n')
+                if leg_descent.interp_dict['input_drift_dist_m'] is None:
+                    f.write("*Interpolation issue before dive (surface-layer drift): {:s}\n" \
+                            .format(leg_descent.interp_dict['description']))
+
+                if dive.events[0].station_loc.interp_dict['input_drift_dist_m'] is None:
+                    f.write("*Interpolation issue during dive (mixed-layer drift): {:s}\n" \
+                            .format(dive.events[0].station_loc.interp_dict['description']))
+
+                if leg_ascent.interp_dict['input_drift_dist_m'] is None:
+                    f.write("*Interpolation issue after dive (surface-layer drift): {:s}\n" \
+                            .format(leg_ascent.interp_dict['description']))
+
+            f.write('\n__________END__________\n\n')
