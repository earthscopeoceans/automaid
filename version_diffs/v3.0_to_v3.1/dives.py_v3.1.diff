diff --git a/scripts/dives.py b/scripts/dives.py
index 1a48a2e..55703ab 100644
--- a/scripts/dives.py
+++ b/scripts/dives.py
@@ -4,7 +4,7 @@
 # Original author: Sebastien Bonnieux
 # Current maintainer: Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 03-Nov-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 05-Nov-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import utils
 import gps
@@ -17,6 +17,7 @@ from obspy import UTCDateTime
 import plotly.graph_objs as graph
 import plotly.offline as plotly
 from pdb import set_trace as keyboard
+from pprint import pprint
 
 # Get current version number.
 version = setup.get_version()
@@ -52,6 +53,7 @@ class Dive:
         self.len_secs = None
         self.len_days = None
 
+        self.mer_environment_file_exists = False
         self.mer_environment_name = None
         self.mer_environment = None
         self.mer_bytes_received = None
@@ -86,6 +88,9 @@ class Dive:
         self.is_complete_mer_file = False
         self.dive_id = None
 
+        self.prev_dive_log_name = None
+        self.prev_dive_mer_environment_name = None
+
         self.next_dive_exists = False
         self.next_dive_log_name = None
         self.next_dive_mer_environment_name = None
@@ -150,28 +155,26 @@ class Dive:
         catch = re.findall("bytes in (\w+/\w+\.MER)", self.log_content)
         if len(catch) > 0:
             self.mer_environment_name = catch[-1].replace("/", "_")
+            mer_fullfile_name = self.base_path + self.mer_environment_name
 
-        # If the dive wrote a .MER file then retrieve its corresponding
-        # environment because those GPS fixes DO relate to start/end of the
-        # dive. HOWEVER, the events (data) actually contained in that .MER file
-        # may correspond to a different dive (GPS fixes from a DIFFERENT .LOG
-        # and .MER environment), thus we must "get_events_between" to correlate
-        # the actual binary data in .MER files with their proper GPS fixes
-        # (usually the dates of the binary events in the .MER file correspond to
-        # the .MER file itself, however if there are a lot of events to send
-        # back corresponding to a single dive, it may take multiple surfacings
-        # to finally transmit them all).
-        self.events = list()
-        if self.mer_environment_name:
-            # Verify that the number of bytes purported to be in the .MER file
-            # are actually in the .MER file (the .LOG prints the expectation)
-            bytes_expected = re.search("](\d+) bytes in " \
-                                       + self.mer_environment_name.replace("_", "/"), self.log_content)
+            if os.path.exists(mer_fullfile_name):
+                self.mer_environment_file_exists = True
+
+        # If the dive wrote a .MER file then retrieve its corresponding environment because those
+        # GPS fixes DO relate to start/end of the dive. HOWEVER, the events (data) actually
+        # contained in that .MER file may correspond to a different dive (GPS fixes from a DIFFERENT
+        # .LOG and .MER environment), thus we must "get_events_between" to correlate the actual
+        # binary data in .MER files with their proper GPS fixes (usually the dates of the binary
+        # events in the .MER file correspond to the .MER file itself, however if there are a lot of
+        # events to send back corresponding to a single dive, it may take multiple surfacings to
+        # finally transmit them all).
+        if self.mer_environment_file_exists:
+            # Verify that the number of bytes purported to be in the .MER file are actually in the
+            # .MER file (the .LOG prints the expectation)
+            bytes_expected = re.search("](\d+) bytes in " + self.mer_environment_name.replace("_", "/"), self.log_content)
             self.mer_bytes_expected = int(bytes_expected.group(1))
 
-            mer_fullfile_name = self.base_path + self.mer_environment_name
             self.mer_bytes_received = os.path.getsize(mer_fullfile_name)
-
             if self.mer_bytes_received == self.mer_bytes_expected:
                 self.is_complete_mer_file = True
 
@@ -191,21 +194,21 @@ class Dive:
             dive_id = re.search("<DIVE ID=(\d+)", self.mer_environment)
             self.dive_id = int(dive_id.group(1))
 
-            # Get list of events associated with this .MER files environment
-            # (the metadata header, which does not necessarily relate to the
-            # attached events and their binary data).
-            self.events = events.get_events_between(self.start_date, self.end_date)
-
-            # For each event
-            for event in self.events:
-                # 1 Set the environment information
-                event.set_environment(self.mer_environment_name, self.mer_environment)
-                # 2 Find true sampling frequency
-                event.find_measured_sampling_frequency()
-                # 3 Correct events date
-                event.correct_date()
-                # 4 Invert wavelet transform of event
-                event.invert_transform()
+        # Get list of events associated with this .MER files environment
+        # (the metadata header, which does not necessarily relate to the
+        # attached events and their binary data).
+        self.events = events.get_events_between(self.start_date, self.end_date)
+
+        # For each event
+        for event in self.events:
+            # 1 Set the environment information
+            event.set_environment(self.mer_environment_name, self.mer_environment)
+            # 2 Find true sampling frequency
+            event.find_measured_sampling_frequency()
+            # 3 Correct events date
+            event.correct_date()
+            # 4 Invert wavelet transform of event
+            event.invert_transform()
 
         # Collect all GPS fixes taken in both the .LOG  and .MER file
         self.gps_list, self.gps_from_log, self.gps_from_mer_environment \
@@ -256,7 +259,7 @@ class Dive:
 
     def generate_mermaid_environment_file(self):
         # Check if there is a Mermaid file
-        if self.mer_environment_name is None:
+        if self.mer_environment_name is None or not self.mer_environment_file_exists:
             return
 
         # Check if file exist
@@ -384,14 +387,16 @@ class Dive:
 
         '''
 
-        # Keep tabs on the MER/LOG files that affect the current dive's gps
-        # interpolation (don't set self.next_dive = next_dive because
-        # that creates highly recursive data structures)
+        # Keep tabs on the MER/LOG files that affect the current dive's GPS interpolation (don't set
+        # self.next_dive = next_dive because that creates highly recursive data structures)
+        if isinstance(prev_dive, Dive):
+            self.prev_dive_log_name = prev_dive.log_name
+            self.prev_dive_mer_environment_name = prev_dive.mer_environment_name
+
         if isinstance(next_dive, Dive):
             self.next_dive_exists = True
-
-        self.next_dive_log_name = next_dive.log_name
-        self.next_dive_mer_environment_name = next_dive.mer_environment_name
+            self.next_dive_log_name = next_dive.log_name
+            self.next_dive_mer_environment_name = next_dive.mer_environment_name
 
         # No dive means no events
         if not self.is_complete_dive:
@@ -417,11 +422,16 @@ class Dive:
             else:
                 self.gps_after_dive_incl_next_dive = self.gps_after_dive_incl_next_dive + next_dive.gps_list
 
-        # Re-sort the expanded GPS list
+        # Ensure sorting of the expanded GPS lists
+        self.gps_before_dive_incl_prev_dive.sort(key=lambda x: x.date)
         self.gps_after_dive_incl_next_dive.sort(key=lambda x: x.date)
 
-        # Final check: interpolation requires at least two points before/after diving
-        if len(self.gps_before_dive_incl_prev_dive) < 2 or len(self.gps_after_dive_incl_next_dive) < 2:
+        # Require at least a single GPS point before and after each dive; after all, we only have
+        # two points to interpolate for mixed-layer drift, which accounts for > 90% of the total
+        # drift (despite the higher drift velocities at the surface, the total the surface-drift
+        # components are generally not large because comparatively so little time is spent there --
+        # see *gps_interpolation.txt for percentages)
+        if len(self.gps_before_dive_incl_prev_dive) < 1 or len(self.gps_after_dive_incl_next_dive) < 1:
             return
 
         # Find when & where the float left the surface
@@ -547,14 +557,22 @@ class Dive:
         print("   Date: {:s} -> {:s} ({:.2f} days; first/last line of {:s})" \
               .format(str(self.start_date)[0:19], str(self.end_date)[0:19], self.len_days, self.log_name))
 
-    def print_dive_gps(self, next_dive):
+    def print_dive_gps(self):
+        # Repeat printout for the previous dive, whose data affect the GPS interpolation of the
+        # current dive
+        if self.prev_dive_mer_environment_name is not None:
+            print("    GPS: {:s} (</ENVIRONMENT>) & {:s} [prev dive]" \
+                  .format(self.prev_dive_mer_environment_name, self.prev_dive_log_name))
+        else:
+            print("    GPS: {:s} [prev dive]".format(self.prev_dive_log_name))
+
         # By definition 1 .LOG == 1 "dive," so there is always a .log file but
         # not necessarily an associated .MER (e.g., test or init I think?)
         if self.mer_environment_name is not None:
-            print("    GPS: {:s} (</ENVIRONMENT>) & {:s} [this dive]" \
+            print("         {:s} (</ENVIRONMENT>) & {:s} [this dive]" \
                   .format(self.mer_environment_name, self.log_name))
         else:
-            print("    GPS: {:s} [this dive]".format(self.log_name))
+            print("         {:s} [this dive]".format(self.log_name))
 
         # Repeat printout for the following dive, whose data affect the gps
         # interpolation of the current dive
@@ -626,13 +644,16 @@ def generate_printout(mdives, mfloat_serial):
     print ""
     i = 0
     for d in sorted(mdives, key=lambda x: x.start_date):
-        # For every dive...
         if d.is_dive:
-            print("  .DIVE. {:s}".format(mfloat_serial))
+            if d.dive_id is not None:
+                print("  .DIVE. {:s} #{:>3d}".format(mfloat_serial, d.dive_id))
+            else:
+                # There is no .MER file associated with this dive
+                print("  .DIVE. {:s}".format(mfloat_serial))
         else:
             print("  .NO DIVE. {:s}".format(mfloat_serial))
         d.print_len()
-        d.print_dive_gps(mdives[i+1])
+        d.print_dive_gps()
         d.print_dive_events()
         print ""
 
