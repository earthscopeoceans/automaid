diff --git a/scripts/tool_invert_mer.py b/scripts/tool_invert_mer.py
index dafb558..af95c6b 100644
--- a/scripts/tool_invert_mer.py
+++ b/scripts/tool_invert_mer.py
@@ -13,36 +13,56 @@
 # Original author: Sebastien Bonnieux
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 13-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 23-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
-import setup
 import events
 import re
 import sys
 import os
+import gps
+import setup
 from pdb import set_trace as keyboard
 
 # Get current version number.
 version = setup.get_version()
 
+# Parse input
 fullpath_file_name = os.path.abspath(sys.argv[1])
-mmd_file_name = os.path.basename(fullpath_file_name)
-mmd_file_path = os.path.join(os.path.dirname(fullpath_file_name), "")
+mer_file_name = os.path.basename(fullpath_file_name)
+mer_file_path = os.path.join(os.path.dirname(fullpath_file_name), "")
 
 def invert_main():
-    mevents = events.Events(mmd_file_path, mmd_file_name)
-    for event in mevents.events:
-        with open(os.path.join(mmd_file_path, event.mmd_data_name), 'r') as f:
-            content = f.read()
+    # Pull all events from this .MER file
+    mevents = events.Events(mer_file_path, mer_file_name)
+    fullpath_mer_name = os.path.join(mer_file_path, mer_file_name)
+
+    # Get station number
+    station_number = mer_file_name.split('_')[0]
+
+    # Collect header block from this .MER file
+    with open(fullpath_mer_name, 'r') as f:
+        content = f.read()
         environment = re.findall("<ENVIRONMENT>.+</PARAMETERS>", content, re.DOTALL)[0]
-        event.set_environment(environment)
+
+    # Collect GPS list from the header -- the subsequent events we loop through
+    # must be contained within these GPS times otherwise this .MER environment
+    # is not references by the .MER events contained therein
+    gpsl = gps.get_gps_from_mer_environment(mer_file_name, environment)
+
+    for event in mevents.events:
+        if not gpsl[0].date < event.date < gpsl[-1].date:
+            print("Event at {:s} is not associated (date out of range) with {:s} " \
+                  "environment...skipping".format(event.date, mer_file_name))
+            continue
+
+        event.set_environment(mer_file_name, environment)
         event.find_measured_sampling_frequency()
         event.correct_date()
         event.invert_transform()
-        event.to_sac(mmd_file_path, station_number="00", force_without_loc=True)
-        event.to_mseed(mmd_file_path, station_number="00", force_without_loc=True)
-        event.plotly(mmd_file_path)
-        event.plot_png(mmd_file_path)
+        event.to_sac(mer_file_path, station_number, force_without_loc=True, force_redo=True)
+        event.to_mseed(mer_file_path, station_number, force_without_loc=True, force_redo=True)
+        event.plotly(mer_file_path, force_redo=True)
+        event.plot_png(mer_file_path, force_redo=True)
 
 if __name__ == "__main__":
     invert_main()
