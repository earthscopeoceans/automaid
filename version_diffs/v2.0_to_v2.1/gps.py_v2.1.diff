diff --git a/scripts/gps.py b/scripts/gps.py
index ae360e9..d24244a 100644
--- a/scripts/gps.py
+++ b/scripts/gps.py
@@ -2,28 +2,24 @@
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
-# Current maintainer: Dr. Joel D. Simon (JDS)
+# Current maintainer: Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 15-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 02-Nov-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
-import setup
 import re
+import setup
 from obspy import UTCDateTime
 from obspy.geodetics.base import gps2dist_azimuth
+import os
+from pprint import pprint
 from pdb import set_trace as keyboard
 
 # Get current version number.
 version = setup.get_version()
 
 class GPS:
-    date = None
-    latitude = None
-    longitude = None
-    clockdrift = None
-    clockfreq = None
-    source = None
-
-    def __init__(self, date, latitude, longitude, clockdrift, clockfreq, hdop, vdop, source):
+    def __init__(self, date=None, latitude=None, longitude=None, clockdrift=None, clockfreq=None,
+                 hdop=None, vdop=None, source=None, interp_dict=None):
         self.date = date
         self.latitude = latitude
         self.longitude = longitude
@@ -32,83 +28,142 @@ class GPS:
         self.hdop = hdop
         self.vdop = vdop
         self.source = source
+        self.interp_dict = interp_dict
+        self.__version__ = version
 
-def linear_interpolation(gps_list, date):
-    gpsl = gps_list
 
+    def __repr__(self):
+        # I don't want to print the entire (large) interpolation dict
+        if self.source == 'interpolated':
+            rep = "GPS({}, {}, {}, {}, {}, {}, {}, '{}', <interp_dict>)" \
+                  .format(repr(self.date), self.latitude, self.longitude, self.clockdrift,
+                          self.clockfreq, self.hdop, self.vdop, self.source)
+        else:
+            rep = "GPS({}, {}, {}, {}, {}, {}, {}, '{}')" \
+                  .format(repr(self.date), self.latitude, self.longitude, self.clockdrift,
+                          self.clockfreq, self.hdop, self.vdop, self.source)
+        return rep
+
+def linear_interpolation(gps_list, date):
     # Check if date is equal to a gps fix
-    for gps in gpsl:
+    for gps in gps_list:
         if date == gps.date:
             return gps
 
-    if date < gpsl[0].date:
-        # if date is before any gps fix compute drift from the two first gps fix
+    # If date is before any gps fix compute drift from the two first gps fix
+    if date < gps_list[0].date:
+        # In this case: gps_list[i] is the FIRST GPS fix AFTER the interpolation date
         i = 0
         j = 1
         # Try to get a minimum time between two gps fix of 10 minutes
-        while abs(gpsl[j].date - gpsl[i].date) < 10 * 60 and j < len(gpsl)-1:
+        while abs(gps_list[j].date - gps_list[i].date) < 10*60 and j < len(gps_list)-1:
             j += 1
         # Try to get a minimum distance between two gps fix of 20 meters
-        while gps2dist_azimuth(gpsl[j].latitude, gpsl[j].longitude,
-                               gpsl[i].latitude, gpsl[i].longitude)[0] < 20 and j < len(gpsl)-1:
+        while gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude,
+                               gps_list[i].latitude, gps_list[i].longitude)[0] < 20 and j < len(gps_list)-1:
             j += 1
 
-    elif date > gpsl[-1].date:
-        # if date is after any gps fix compute drift from the two last gps fix
+    # If date is after any gps fix compute drift from the two last gps fix
+    elif date > gps_list[-1].date:
+        # In this case gps_list[i] is the LAST GPS fix BEFORE the interpolation date
         i = -1
         j = -2
         # Try to get a minimum time between two gps fix of 10 minutes
-        while abs(gpsl[j].date - gpsl[i].date) < 10 * 60 and abs(j) < len(gpsl):
+        while abs(gps_list[j].date - gps_list[i].date) < 10 * 60 and abs(j) < len(gps_list):
             j -= 1
         # Try to get a minimum distance between two gps fix of 20 meters
-        while gps2dist_azimuth(gpsl[j].latitude, gpsl[j].longitude,
-                               gpsl[i].latitude, gpsl[i].longitude)[0] < 20 and abs(j) < len(gpsl):
+        while gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude,
+                               gps_list[i].latitude, gps_list[i].longitude)[0] < 20 and abs(j) < len(gps_list):
             j -= 1
 
     else:
-        # if date is between two gps fix find the appropriate gps fix
+        # If date is between two gps fix find the appropriate gps fix
         i = 0
         j = 1
-        while not gpsl[i].date < date < gpsl[j].date and j < len(gpsl)-1:
+        while not gps_list[i].date < date < gps_list[j].date and j < len(gps_list)-1:
             i += 1
             j += 1
 
     # If the distance between the two GPS points retained is less than 20 m, don't interpolate just pick one
-    if gps2dist_azimuth(gpsl[j].latitude, gpsl[j].longitude, gpsl[i].latitude, gpsl[i].longitude)[0] < 20:
-        latitude = gpsl[i].latitude
-        longitude = gpsl[i].longitude
+    if gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude, gps_list[i].latitude, gps_list[i].longitude)[0] < 20:
+        input_drift_dist_m = None
+        input_drift_time = None
+        input_drift_vel_ms = None
+        input_lat_drift_dist_deg = None
+        input_lat_drift_vel_degs = None
+        input_lon_drift_dist_deg = None
+        input_lon_drift_vel_degs = None
+
+        interp_drift_time = None
+        interp_lat_drift_dist_deg = None
+        interp_lat = gps_list[i].latitude
+        interp_lon_drift_dist_deg = None
+        interp_lon = gps_list[i].longitude
+        interp_drift_dist_m = None
+        interp_drift_vel_ms = None
     else:
-        latitude = gpsl[i].latitude
-        latitude += (date - gpsl[i].date) * (gpsl[j].latitude - gpsl[i].latitude) / (gpsl[j].date - gpsl[i].date)
-        longitude = gpsl[i].longitude
-        longitude += (date - gpsl[i].date) * (gpsl[j].longitude - gpsl[i].longitude) / (gpsl[j].date - gpsl[i].date)
+        input_drift_dist_m = gps2dist_azimuth(gps_list[j].latitude, gps_list[j].longitude, \
+                                            gps_list[i].latitude, gps_list[i].longitude)[0]
+        input_drift_time = gps_list[j].date - gps_list[i].date
+        input_drift_vel_ms = input_drift_dist_m / input_drift_time
+
+        input_lat_drift_dist_deg = gps_list[j].latitude - gps_list[i].latitude
+        input_lat_drift_vel_degs = input_lat_drift_dist_deg / input_drift_time
+
+        # This is a bit of a cheat because it assumes an longitude lines are equally spaced on the
+        # sphere, which they are not
+        input_lon_drift_dist_deg = gps_list[j].longitude - gps_list[i].longitude
+        input_lon_drift_vel_degs = input_lon_drift_dist_deg / input_drift_time
 
-    return GPS(date, latitude, longitude, None, None, None, None, "interpolated")
+        interp_drift_time = date - gps_list[i].date
+        interp_lat_drift_dist_deg = input_lat_drift_vel_degs * interp_drift_time
+        interp_lat = gps_list[i].latitude + interp_lat_drift_dist_deg
+        interp_lon_drift_dist_deg = input_lon_drift_vel_degs * interp_drift_time
+        interp_lon = gps_list[i].longitude + interp_lon_drift_dist_deg
+
+        # This is a bit of flub -- the interpolated drift distance computed here is using our (ever
+        # so slightly) incorrect longitude, so when projected on a sphere we get a slightly
+        # different distance than in our equal-box lat/lon projection; as such, the interpolated
+        # drift velocity, which in reality must equal the drift velocity computed from the input,
+        # will be slightly different
+        interp_drift_dist_m = gps2dist_azimuth(interp_lat, interp_lon, gps_list[i].latitude, gps_list[i].longitude)[0]
+        interp_drift_vel_ms = interp_drift_dist_m / interp_drift_time
+
+    # Throw all local variables into dictionary so that I may later reference
+    # these interpolation parameters -- this is not ideal because it creates
+    # redundant records...preferrably interpolation would be its own Class
+    interp_dict = locals()
+
+    # Nicety: >>> from pprint import pprint
+    #         >>> pprint(interp_dict)
+
+    return GPS(date, interp_lat, interp_lon, None, None, None, None,
+               "interpolated", interp_dict)
 
 
 # Find GPS fix in log files and Mermaid files
-def get_gps_list(log_name, log_content, mmd_environment_name, mmd_environment):
-    gps_from_log = get_gps_from_log(log_name, log_content)
-    gps_from_mmd_env = get_gps_from_mermaid_environment(mmd_environment_name, mmd_environment)
+def get_gps_list(log_name, log_content, mer_environment_name, mer_environment):
+    gps_from_log = get_gps_from_log_content(log_name, log_content)
+    gps_from_mer_environment = get_gps_from_mer_environment(mer_environment_name, mer_environment)
 
     # Concatenate GPS lists
-    gps_list = gps_from_log + gps_from_mmd_env
+    gps_list = gps_from_log + gps_from_mer_environment
 
     # Order based on date
     gps_list = sorted(gps_list, key=lambda x: x.date)
 
-    return gps_list, gps_from_log, gps_from_mmd_env
+    return gps_list, gps_from_log, gps_from_mer_environment
 
 
-def get_gps_from_mermaid_environment(mmd_name, mmd_environment):
+def get_gps_from_mer_environment(mer_environment_name, mer_environment):
     gps = list()
 
     # Mermaid environment can be empty
-    if mmd_environment is None:
+    if mer_environment is None:
         return gps
 
     # get gps information in the mermaid environment
-    gps_tag_list = mmd_environment.split("</ENVIRONMENT>")[0].split("<GPSINFO")[1:]
+    gps_tag_list = mer_environment.split("</ENVIRONMENT>")[0].split("<GPSINFO")[1:]
     for gps_tag in gps_tag_list:
         fixdate = re.findall(" DATE=(\d+-\d+-\d+T\d+:\d+:\d+)", gps_tag)
         if len(fixdate) > 0:
@@ -178,10 +233,10 @@ def get_gps_from_mermaid_environment(mmd_name, mmd_environment):
             clockfreq = None
 
         # Check if there is an error of clock synchronization
-        if clockfreq <= 0:
-            err_msg = "WARNING: Error with clock synchronization in file \"" + mmd_name + "\"" \
-                   + " at " + fixdate.isoformat() + ", clockfreq = " + str(clockfreq) + "Hz"
-            print err_msg
+        # if clockfreq <= 0:
+            # err_msg = "WARNING: Error with clock synchronization in file \"" + mer_environment_name + "\"" \
+            #        + " at " + fixdate.isoformat() + ", clockfreq = " + str(clockfreq) + "Hz"
+            # print err_msg
 
         # .MER files do not include hdop or vdop.
         hdop = None
@@ -190,14 +245,14 @@ def get_gps_from_mermaid_environment(mmd_name, mmd_environment):
         # Add date to the list
         if fixdate is not None and latitude is not None and longitude is not None \
                 and clockdrift is not None and clockfreq is not None:
-            gps.append(GPS(fixdate, latitude, longitude, clockdrift, clockfreq, hdop, vdop, mmd_name))
+            gps.append(GPS(fixdate, latitude, longitude, clockdrift, clockfreq, hdop, vdop, mer_environment_name))
         else:
             raise ValueError
 
     return gps
 
 
-def get_gps_from_log(log_name, log_content):
+def get_gps_from_log_content(log_name, log_content):
     gps = list()
 
     gps_log_list = log_content.split("GPS fix...")[1:]
@@ -274,3 +329,157 @@ def get_gps_from_log(log_name, log_content):
             gps.append(GPS(fixdate, latitude, longitude, clockdrift, clockfreq, hdop, vdop, log_name))
 
     return gps
+
+
+def write_gps_txt(mdives, processed_path, mfloat_path, mfloat):
+    gps_genexp = (gps for dive in mdives for gps in dive.gps_list)
+
+    gps_fmt_spec = "{:>19s}    {:>10.6f}    {:>11.6f}    {:>6.3f}    {:>6.3f}    {:>17.6f}    {:>15s}\n"
+    gps_file = os.path.join(processed_path, mfloat_path, mfloat+"_gps.txt")
+
+    with open(gps_file, "w+") as f:
+        f.write("            GPS_TIME       GPS_LAT        GPS_LON  GPS_HDOP  GPS_VDOP    GPS_TIME-MER_TIME             SOURCE\n".format())
+
+        for g in sorted(gps_genexp, key=lambda x: x.date):
+            if g.hdop is None:
+                g.hdop = float("NaN")
+            if g.vdop is None:
+                g.vdop = float("NaN")
+
+            f.write(gps_fmt_spec.format(str(g.date)[:19] + 'Z', g.latitude, g.longitude, g.hdop, g.vdop, g.clockdrift, g.source))
+
+
+def write_gps_interpolation_txt(mdives, processed_path, mfloat_path, mfloat):
+    '''Writes MERMAID GPS interpolation file, detailing GPS and interpolation parameters for the three
+    main regimes of each dive: descent and drift in the surface layer, drift in the mixed layer, and
+    ascent and drift in the surface layer
+
+    '''
+
+    # NB, the comments here assume a normal dive where all GPS fixes are obtained and MERMAID dives
+    # deeper than the mix layer depth; see especially dives.compute_station_locations and
+    # gps.linear_interpolation to understand of edge-cases where perhaps some GPS fixes are missing
+    # and/or MERMAID didn't dive into the mixed layer.  In all cases, GPS interpolation is still
+    # broken into three regimes: descent drift,"deep" drift, and ascent drift.  Descent drift uses
+    # the surface-drift velocity before the dive to interpolate forward in time for the location
+    # where MERMAID dove into the mixed layer (left the surface layer); ascent drift uses the
+    # surface-drift velocity after the dive to interpolate backward in time for the location where
+    # MERMAID ascended into the surface layer (left the mixed layer); "deep" drift uses the velocity
+    # of drift between those two points to estimate where MERMAID was when it recorded events while
+    # drifting in the mixed layer.
+
+    # "input" to gps_linear_interpolation are those GPS instances that we give the algorithm
+    def parse_input_params(leg):
+        if leg['input_drift_time'] is not None:
+            input_params = [int(leg['input_drift_time'] ),
+                            leg['input_drift_time'] / 60.0,
+                            int(round(leg['input_drift_dist_m'])),
+                            leg['input_drift_dist_m'] /1000,
+                            leg['input_drift_vel_ms'],
+                            leg['input_drift_vel_ms'] * 3.6, # km/hr
+                            leg['input_drift_vel_ms'] * 3.6 * 24] #km/day
+            input_params = map(abs, input_params)
+            input_fmt_spec = '{:>6d}        {:>7.1f}        {:>6d}        {:>4.1f}        {:>5.2f}        {:>7.2f}        {:>7.2f}'
+        else:
+            # If the interp values are "None" that means that no interpolation was performed; a single GPS fixed used
+            input_params = [None] * 7
+            input_fmt_spec = '{:>6s}        {:>7s}        {:>6s}        {:>4s}        {:>5s}        {:>7s}        {:>7s}'
+
+        return (input_params, input_fmt_spec)
+
+    # "interp" from gps_linear_interpolation are those GPS instances the algorithm computes given
+    # the input
+    def parse_interp_params(leg):
+        if leg['input_drift_time'] is not None:
+            interp_params = [int(leg['interp_drift_time'] ),
+                             leg['interp_drift_time'] / 60.0,
+                             int(round(leg['interp_drift_dist_m'])),
+                             leg['interp_drift_dist_m'] /1000,
+                             leg['interp_drift_vel_ms'],
+                             leg['interp_drift_vel_ms'] * 3.6, # km/hr
+                             leg['interp_drift_vel_ms'] * 3.6 * 24] #km/day
+            interp_params = map(abs, interp_params)
+            interp_fmt_spec = '{:>6d}        {:>7.1f}        {:>6d}        {:>4.1f}        {:>5.2f}        {:>7.2f}        {:>7.2f}'
+        else:
+            interp_params = [None] * 7
+            interp_fmt_spec = '{:>6s}        {:>7s}        {:>6s}        {:>4s}        {:>5s}        {:>7s}        {:>7s}'
+
+        return (interp_params, interp_fmt_spec)
+
+
+    # Generate (unique) list of dives with events whose interpolated locations we are able to compute
+    dive_set = set(dive for dive in mdives for event in dive.events if event.station_loc)
+    dive_list = list(dive_set)
+    dive_list = sorted(dive_list, key=lambda x: x.start_date)
+
+    # Print GPS interpolation information for every dive that includes an event all three dive regimes
+    gps_interp_file = os.path.join(processed_path, mfloat_path, mfloat+"_gps_interpolation.txt")
+    with open(gps_interp_file, "w+") as f:
+        for dive in dive_list:
+            # Write headers to each dive block
+            f.write("DIVE ID: {:>4d}\n".format(dive.dive_id))
+            f.write("DATES: {:>19s} --> {:19s}\n\n".format(str(dive.start_date)[:19] + 'Z', str(dive.end_date)[:19] + 'Z'))
+            f.write("DRIFT_REGIME               TIME_S       TIME_MIN        DIST_M     DIST_KM      VEL_M/S      VEL_KM/HR     VEL_KM/DAY      DIST_%                                 SAC_MSEED_TRACE\n")
+
+            # Compute the percentage of the total interpolate distance for the three regimes:
+            # (1) surface-layer drift during the descent
+            #
+            # (2) mixed_layer drift (total drift in mixed layer same for all events; use 'input' 'interp' dist...
+            #      station.loc['interp_dist_m'] is interpolated distance from leaving surface layer to event
+            #     .station.loc['input_dist_m'] is interpolated distance from leaving surface layer to returning to surface layer)
+            #
+            # (3) surface-layer drift during the ascent
+            interp_dist_descent = dive.descent_leave_surface_loc.interp_dict['interp_drift_dist_m']
+            input_dist_mixed = dive.events[0].station_loc.interp_dict['input_drift_dist_m']
+            interp_dist_ascent = dive.ascent_reach_surface_loc.interp_dict['interp_drift_dist_m']
+            if all([interp_dist_descent, input_dist_mixed, interp_dist_ascent]):
+                total_interp_dist = sum([interp_dist_descent, input_dist_mixed, interp_dist_ascent])
+                interp_perc_descent = (interp_dist_descent / total_interp_dist) * 100
+                input_perc_mixed = (input_dist_mixed / total_interp_dist) * 100
+                interp_perc_ascent = (interp_dist_ascent / total_interp_dist) * 100
+            else:
+                interp_perc_descent = float("nan")
+                input_perc_mixed = float("nan")
+                interp_perc_ascent = float("nan")
+
+            # Parse the GPS ('input') components of surface drift before dive: these are actual GPS points
+            gps_surface_descent, gps_fmt_spec = parse_input_params(dive.descent_leave_surface_loc.interp_dict)
+            gps_fmt_spec = "gps_surface                " + gps_fmt_spec + "\n"
+            f.write(gps_fmt_spec.format(*gps_surface_descent))
+
+            # Parse the interpolated components of surface drift before dive: between last GPS point
+            # and crossing into mixed layer
+            interp_surface_descent, interp_fmt_spec = parse_interp_params(dive.descent_leave_surface_loc.interp_dict)
+            interp_surface_descent.append(interp_perc_descent)
+            interp_fmt_spec = "interp_surface             " + interp_fmt_spec + "        {:>4.1f}\n"
+            f.write(interp_fmt_spec.format(*interp_surface_descent))
+
+            # For every event recorded during the dive: parse the interpolated components of the
+            # mixed-layer drift from leaving the surface layer (passing into the "deep" or
+            # mixed-layer drift regime) and recording an event
+            for event in dive.events:
+                interp_drift_to_event_mixed_layer, interp_fmt_spec = parse_interp_params(event.station_loc.interp_dict)
+                interp_drift_to_event_mixed_layer.append(event.get_export_file_name())
+                interp_fmt_spec = " interp_mixed(to_event)    " + interp_fmt_spec + "                    {:>40s}\n"
+
+                f.write(interp_fmt_spec.format(*interp_drift_to_event_mixed_layer))
+
+            # The total interpolated drift in the mixed layer -- that drift that occurs between the
+            # last point of the ascent and the first point of the ascent -- is the same for every
+            # event; just use the last event instance
+            total_drift_mixed_layer, interp_fmt_spec = parse_input_params(event.station_loc.interp_dict)
+            total_drift_mixed_layer.append(input_perc_mixed)
+            interp_fmt_spec = "interp_mixed               " + interp_fmt_spec + "        {:>4.1f}\n"
+            f.write(interp_fmt_spec.format(*total_drift_mixed_layer))
+
+            # Parse the interpolated components of surface drift after dive: crossing out of mixed
+            # layer and recording first GPS point
+            interp_surface_ascent, interp_fmt_spec = parse_interp_params(dive.ascent_reach_surface_loc.interp_dict)
+            interp_surface_ascent.append(interp_perc_ascent)
+            interp_fmt_spec = "interp_surface             " + interp_fmt_spec + "        {:>4.1f}\n"
+            f.write(interp_fmt_spec.format(*interp_surface_ascent))
+
+            # Parse the GPS ('input') components of surface drift after dive: these are actual GPS points
+            gps_surface_ascent, gps_fmt_spec = parse_input_params(dive.ascent_reach_surface_loc.interp_dict)
+            gps_fmt_spec = "gps_surface                " + gps_fmt_spec + "\n\n\n"
+            f.write(gps_fmt_spec.format(*gps_surface_ascent))
