diff --git a/scripts/vitals.py b/scripts/vitals.py
index 7223ee2..812a01b 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -2,17 +2,19 @@
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
-# Current maintainer: Dr. Joel D. Simon (JDS)
+# Current maintainer: Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 01-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 26-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import re
+import os
 from obspy import UTCDateTime
 import plotly.graph_objs as graph
 import plotly.offline as plotly
+from pdb import set_trace as keyboard
 
-# Get current version number.
+# Get current version number
 version = setup.get_version()
 
 def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
@@ -68,6 +70,7 @@ def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
                 filename=vital_file_path + "voltage.html",
                 auto_open=False)
 
+    return
 
 def plot_internal_pressure(vital_file_path, vital_file_name, begin, end):
     # Read file
@@ -112,6 +115,7 @@ def plot_internal_pressure(vital_file_path, vital_file_name, begin, end):
                 filename=vital_file_path + "internal_pressure.html",
                 auto_open=False)
 
+    return
 
 def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     # Read file
@@ -178,10 +182,11 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
                 auto_open=False)
 
 
-def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
+    return
 
-    pressure_offset = [dive.p2t_offset_measurement - dive.p2t_offset_param for dive in mdives if dive.is_complete_dive]
-    date = [dive.end_date for dive in mdives if dive.is_complete_dive]
+def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
+    date  = [d.end_date for d in mdives if d.is_complete_dive]
+    corrected_pressure_offset = [d.p2t_offset_corrected for d in mdives if d.is_complete_dive]
 
     # Dead-float adjustment
     if len(date) < 1:
@@ -196,24 +201,64 @@ def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
     while date[j] < end and j < len(date)-1:
         j += 1
     date = date[i:j+1]
-    pressure_offset = pressure_offset[i:j+1]
+    corrected_pressure_offset = corrected_pressure_offset[i:j+1]
 
     # Add battery values to the graph
-    pressure_offset_line = graph.Scatter(x=date,
-                                         y=pressure_offset,
-                                         name="pressure offset",
-                                         line=dict(color='blue',
-                                                   width=2),
-                                         mode='lines')
+    corrected_pressure_offset_line = graph.Scatter(x=date,
+                                                   y=corrected_pressure_offset,
+                                                   name="corrected_pressure offset",
+                                                   line=dict(color='blue',
+                                                             width=2),
+                                                   mode='lines')
 
-    data = [pressure_offset_line]
+    data = [corrected_pressure_offset_line]
 
     layout = graph.Layout(title="Corrected pressure offset in LOG files",
                           xaxis=dict(title='Coordinated Universal Time (UTC)', titlefont=dict(size=18)),
-                          yaxis=dict(title='Pressure offset (millibars)', titlefont=dict(size=18)),
+                          yaxis=dict(title='Corrected pressure offset (millibars)', titlefont=dict(size=18)),
                           hovermode='closest'
                           )
 
     plotly.plot({'data': data, 'layout': layout},
-                filename=vital_file_path + "corrected_pressure_offset.html",
+                filename=vital_file_path + "corrected_external_pressure_offset.html",
                 auto_open=False)
+
+    return
+
+def write_corrected_pressure_offset(dives_dict, processed_path):
+    '''Writes:
+
+    [processed_path]/last_dive_pressure_offset.txt
+
+    given a dict of whose keys are float serial numbers and whose values are
+    lists of their associated Dive instances
+
+    '''
+
+    lastdive_fmt_spec = "{:>12s}    {:>19s}    {:>15s}      {:>3d}      {:>3d}          {:>3d}  {:3>s}\n"
+    lastdive_f = os.path.join(processed_path, "last_dive_pressure_offset.txt")
+    with open(lastdive_f, "w+") as f:
+        f.write("     MERMAID         LAST_SURFACING           LOG_NAME     PEXT   OFFSET  PEXT-OFFSET\n".format())
+
+        for mfloat in dives_dict.keys():
+            for d in reversed(dives_dict[mfloat]):
+                if d.is_complete_dive:
+                    lastdive = d
+                    break
+
+            warn_str = ''
+            if lastdive.p2t_offset_corrected > 200:
+                warn_str = '!!!'
+                print("\n\n!!! WARNING: {:s} corrected external pressure was {:d} mbar at last surfacing !!!"
+                      .format(mfloat, lastdive.p2t_offset_corrected))
+                print("!!! The corrected external pressure must stay below 300 mbar !!!")
+                print("!!! Consider adjusting {:s}.cmd using 'p2t qm!offset ...' AFTER 'buoy bypass' and BEFORE 'stage ...' !!!\n\n"
+                      .format(mfloat))
+
+            f.write(lastdive_fmt_spec.format(mfloat,
+                                             str(lastdive.ascent_reach_surface_date)[0:19],
+                                             lastdive.log_name,
+                                             lastdive.p2t_offset_measurement,
+                                             lastdive.p2t_offset_param,
+                                             lastdive.p2t_offset_corrected,
+                                             warn_str))
