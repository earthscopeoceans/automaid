diff --git a/scripts/main.py b/scripts/main.py
index fba69fe..a87ce78 100644
--- a/scripts/main.py
+++ b/scripts/main.py
@@ -1,11 +1,11 @@
-# automaid v1.1.0
+# Part of automaid -- a Python package to process MERMAID files
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 17-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 01-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import os
@@ -30,7 +30,7 @@ filterDate = {
     "452.112-N-02": (datetime.datetime(2018, 12, 28), datetime.datetime(2100, 1, 1)),
     "452.112-N-03": (datetime.datetime(2018, 4, 9), datetime.datetime(2100, 1, 1)),
     "452.112-N-04": (datetime.datetime(2019, 1, 3), datetime.datetime(2100, 1, 1)),
-    #"452.112-N-05": (datetime.datetime(2019, 1, 3), datetime.datetime(2100, 1, 1)),
+    "452.112-N-05": (datetime.datetime(2019, 1, 3), datetime.datetime(2100, 1, 1)),
     "452.020-P-06": (datetime.datetime(2018, 6, 26), datetime.datetime(2100, 1, 1)),
     "452.020-P-07": (datetime.datetime(2018, 6, 27), datetime.datetime(2100, 1, 1)),
     "452.020-P-08": (datetime.datetime(2018, 8, 5), datetime.datetime(2100, 1, 1)),
@@ -50,7 +50,7 @@ filterDate = {
     "452.020-P-24": (datetime.datetime(2018, 9, 13), datetime.datetime(2100, 1, 1)),
     "452.020-P-25": (datetime.datetime(2018, 9, 14), datetime.datetime(2100, 1, 1)),
     "452.020-P-0050": (datetime.datetime(2019, 8, 11), datetime.datetime(2100, 1, 1)),
-    #"452.020-P-0051": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
+    "452.020-P-0051": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
     "452.020-P-0052": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
     "452.020-P-0053": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1)),
     "452.020-P-0054": (datetime.datetime(2019, 7, 1), datetime.datetime(2100, 1, 1))
@@ -64,7 +64,7 @@ redo = False
 events_plotly = False
 events_mseed = True
 events_sac = True
-events_png = True
+events_png = False
 
 # Set paths.
 automaid_path = os.environ["AUTOMAID"]
@@ -89,8 +89,8 @@ def main():
 
     # For each Mermaid float
     for mfloat in mfloats:
-        print ""
-        print "> " + mfloat
+        mfloat_serial = mfloat[-4:]
+        print("Processing {:s} .LOG & .MER files...".format(mfloat_serial))
 
         # Set the path for the float
         mfloat_path = os.path.join(processed_path, mfloat, "")
@@ -131,12 +131,22 @@ def main():
         for f in files_to_copy:
             shutil.copy(f, mfloat_path)
 
+
         # Build list of all mermaid events recorded by the float
+        print(" ...compiling a list of events from {:s} .MER files (GPS & seismic data)..." \
+              .format(mfloat_serial))
         mevents = events.Events(mfloat_path)
 
-        # Process data for each dive
+        # Correlate the list of events with each dive.
+        print(" ...matching those events to {:s} .LOG ('dive') files (GPS & dive metadata)..." \
+              .format(mfloat_serial))
         mdives = dives.get_dives(mfloat_path, mevents)
 
+        # Attach a completeness metric concerning the data in the .MER file to
+        # each event -- this is only possible after collecting all dives
+        # (mdives) and all events separately (mevents).
+        dives.attach_mmd_is_complete_to_dive_events(mdives)
+
         # Compute files for each dive
         for dive in mdives:
             # Create the directory
@@ -149,7 +159,7 @@ def main():
             # Generate dive plot
             dive.generate_dive_plotly()
 
-        # Compute clock drift correction for each event
+        # Compute clock drift correction for each event, and build list of GPS locations.
         for dive in mdives:
             dive.correct_events_clock_drift()
 
@@ -160,7 +170,8 @@ def main():
             mdives[i].compute_events_station_location(mdives[i+1])
             i += 1
 
-        # Generate plot and sac files
+        # Generate plots, SAC, and miniSEED files.
+        print(" ...writing {:s} sac/mseed/png/html output files...".format(mfloat_serial))
         for dive in mdives:
             if events_png:
                 dive.generate_events_png()
@@ -179,6 +190,73 @@ def main():
         if len(mdives) > 1:
             vitals.plot_corrected_pressure_offset(mfloat_path, mdives, begin, end)
 
+        # Build unsorted list of all GPS fixes from .LOG and .MER.
+        print(" ...writing list of {:s} GPS locations...".format(mfloat_serial))
+        gps_dates = list()
+        gps_latitudes = list()
+        gps_longitudes = list()
+        gps_hdops = list()
+        gps_vdops = list()
+        gps_clockdrifts = list()
+        gps_sources = list()
+
+        for dive in mdives:
+            # Collect all GPS data from LOG file.
+            for gps_fix in dive.gps_from_log:
+                gps_dates.append(gps_fix.date)
+                gps_latitudes.append(gps_fix.latitude)
+                gps_longitudes.append(gps_fix.longitude)
+                gps_hdops.append(gps_fix.hdop)
+                gps_vdops.append(gps_fix.vdop)
+                gps_clockdrifts.append(gps_fix.clockdrift)
+                gps_sources.append(dive.log_name)
+
+            # Collect all GPS data from MER file.
+            for gps_fix in dive.gps_from_mmd_env:
+                gps_dates.append(gps_fix.date)
+                gps_latitudes.append(gps_fix.latitude)
+                gps_longitudes.append(gps_fix.longitude)
+                gps_hdops.append(gps_fix.hdop)
+                gps_vdops.append(gps_fix.vdop)
+                gps_clockdrifts.append(gps_fix.clockdrift)
+                gps_sources.append(dive.mmd_environment_name)
+
+        # Concatenate all GPS data into zipped tuple and sort based on zeroth (date) index.
+        complete_gps_tup = sorted(zip(gps_dates, gps_latitudes, gps_longitudes, gps_hdops,
+                                       gps_vdops, gps_clockdrifts, gps_sources))
+
+        # Write GPS text file
+        fmt_spec = "{:>27s}    {:>10.6f}    {:>11.6f}    {:>5.3f}    {:>5.3f}    {:>17.6f}    {:>15s}\n"
+        gps_f = os.path.join(processed_path, mfloat_path, mfloat+"_GPS.txt")
+        with open(gps_f, "w+") as f:
+            for t in complete_gps_tup:
+                l = list(t)
+                if l[3] is None:
+                    l[3] = float("NaN")
+
+                if l[4] is None:
+                    l[4] = float("NaN")
+
+                f.write(fmt_spec.format(l[0], l[1], l[2], l[3], l[4], l[5], l[6]))
+
+        # Generate printout detailing how everything connects
+        sac_count = 0
+        print ""
+        i = 0
+        for d in mdives:
+            # For every dive...
+            if d.is_dive:
+                print("  .DIVE. {:s}".format(mfloat_serial))
+            else:
+                print("  .NO DIVE. {:s}".format(mfloat_serial))
+            d.print_dive_length()
+            d.print_dive_gps(mdives[i+1])
+            d.print_dive_events()
+            print ""
+
+        print("    {:s} total: {:d} SAC files\n" \
+              .format(mfloat_serial, sum(o.sac_count for o in mdives)))
+
         # Clean directories
         for f in glob.glob(mfloat_path + "/" + mfloat_nb + "_*.LOG"):
             os.remove(f)
