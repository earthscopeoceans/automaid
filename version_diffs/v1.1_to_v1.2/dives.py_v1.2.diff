diff --git a/scripts/dives.py b/scripts/dives.py
index 863dd8d..4937ec8 100644
--- a/scripts/dives.py
+++ b/scripts/dives.py
@@ -1,11 +1,11 @@
-# automaid v1.1.0
+# Part of automaid -- a Python package to process MERMAID files
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 17-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 01-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import glob
@@ -24,16 +24,19 @@ version = setup.get_version()
 # Log class to manipulate log files
 class Dive:
     log_name = None
+    next_dive_log_name = None
     base_path = None
     directory_name = None
     export_path = None
     date = None
     end_date = None
+    dive_length = None
     is_init = None
     is_dive = None
     is_complete_dive = None
     log_content = None
-    mmd_name = None
+    mmd_environment_name = None
+    next_dive_mmd_environment_name = None
     mmd_environment = None
     events = None
     station_name = None
@@ -46,14 +49,23 @@ class Dive:
     great_depth_leave_loc = None
     p2t_offset_param = 0
     p2t_offset_measurement = 0
+    mmd_bytes_received = None
+    mmd_bytes_expected = None
+    mmd_file_is_complete = None
+    dive_id = None
+    sac_count = 0
+    next_dive_exists = False
 
     def __init__(self, base_path, log_name, events):
+
         self.base_path = base_path
         self.log_name = log_name
         self.__version__ = version
-        print log_name
 
-        # Get the date from the file name
+        # Get the date from the file name -- the hexadecimal component of the
+        # .LOG file name is the same Unix Epoch time as the first line of the
+        # LOG file (there in int seconds); i.e., .LOG files are named for the
+        # time that their first line is written
         self.date = utils.get_date_from_file_name(log_name)
 
         # Read the content of the LOG
@@ -63,6 +75,7 @@ class Dive:
         # Get the last date
         ed = re.findall("(\d+):", utils.split_log_lines(self.log_content)[-1])[0]
         self.end_date = UTCDateTime(int(ed))
+        self.dive_length = self.end_date - self.date # seconds
 
         # Check if the log correspond to the float initialization
         self.is_init = False
@@ -104,19 +117,52 @@ class Dive:
         # Find the .MER file of the ascent
         catch = re.findall("bytes in (\w+/\w+\.MER)", self.log_content)
         if len(catch) > 0:
-            self.mmd_name = catch[-1].replace("/", "_")
-
-        # If the dive contain a Mermaid file
+            self.mmd_environment_name = catch[-1].replace("/", "_")
+
+        # If the dive wrote a .MER file then retrieve its corresponding
+        # environment because those GPS fixes DO relate to start/end of the
+        # dive. HOWEVER, the events (data) actually contained in that .MER file
+        # may correspond to a different dive (GPS fixes from a DIFFERENT .LOG
+        # and .MER environment), thus we must "get_events_between" to correlate
+        # the actual binary data in .MER files with their proper GPS fixes
+        # (usually the dates of the binary events in the .MER file correspond to
+        # the .MER file itself, however if there are a lot of events to send
+        # back corresponding to a single dive, it may take multiple surfacings
+        # to finally transmit them all).
         self.events = list()
-        if self.mmd_name:
-            print "    --> " + self.mmd_name
+        if self.mmd_environment_name:
+            # Verify that the number of bytes purported to be in the .MER file
+            # are actually in the .MER file (the .LOG prints the expectation)
+            bytes_expected = re.search("](\d+) bytes in " \
+                                       + self.mmd_environment_name.replace("_", "/"), self.log_content)
+            self.mmd_bytes_expected = int(bytes_expected.group(1))
+
+            mer_fullfile_name = self.base_path + self.mmd_environment_name
+            self.mmd_bytes_received = os.path.getsize(mer_fullfile_name)
+
+            self.mmd_file_is_complete = False
+            if self.mmd_bytes_received == self.mmd_bytes_expected:
+                self.mmd_file_is_complete = True
+
+            # Warning if .MER transmission is incomplete
+            if not self.mmd_file_is_complete:
+                print("!!!! WARNING: MER file transmission is incomplete, do not invert SAC/mSEED using {:s}" \
+                      .format(self.mmd_environment_name))
+                print("      Expected {:>6d} bytes\n      Received {:>6d} bytes"\
+                      .format(self.mmd_bytes_expected, self.mmd_bytes_received))
 
             # Read the Mermaid environment associated to the dive
-            with open(self.base_path + self.mmd_name, "r") as f:
+            with open(mer_fullfile_name, "r") as f:
                 content = f.read()
             self.mmd_environment = re.findall("<ENVIRONMENT>.+</PARAMETERS>", content, re.DOTALL)[0]
 
-            # Get list of events associated to the dive
+            # Get dive ID according to .MER (can these be reset?)
+            dive_id = re.search("<DIVE ID=(\d+)", self.mmd_environment)
+            self.dive_id = int(dive_id.group(1))
+
+            # Get list of events associated with this .MER files environment
+            # (the metadata header, which does not necessarily relate to the
+            # attached events and their binary data).
             self.events = events.get_events_between(self.date, self.end_date)
 
             # For each event
@@ -131,7 +177,8 @@ class Dive:
                 event.invert_transform()
 
         # Find the position of the float
-        self.gps_list = gps.get_gps_list(self.log_content, self.mmd_environment, self.mmd_name)
+        self.gps_list, self.gps_from_log, self.gps_from_mmd_env \
+            = gps.get_gps_list(self.log_content, self.mmd_environment, self.mmd_environment_name)
         self.gps_list_is_complete = False
         if self.is_complete_dive:
             # Check that the last GPS fix of the list correspond to the ascent position
@@ -139,15 +186,15 @@ class Dive:
             surface_date = UTCDateTime(surface_date[0][1])
             if len(self.gps_list) == 0:
                 print "WARNING: No GPS synchronization at all for \"" \
-                        + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                        + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             elif len(self.gps_list) > 1 and self.gps_list[-1].date > surface_date:
                 self.gps_list_is_complete = True
             elif self.gps_list[-1].date > surface_date:
                 print "WARNING: No GPS synchronization before diving for \"" \
-                        + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                        + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             else:
                 print "WARNING: No GPS synchronization after surfacing for \"" \
-                        + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                        + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
 
         # Find the pressure offset
         if self.is_complete_dive:
@@ -169,12 +216,18 @@ class Dive:
 
     def generate_mermaid_environment_file(self):
         # Check if there is a Mermaid file
-        if self.mmd_name is None:
+        if self.mmd_environment_name is None:
             return
+
         # Check if file exist
-        export_path = self.export_path + self.log_name + "." + self.mmd_name + ".env"
+        export_path = self.export_path + self.log_name + "." + self.mmd_environment_name + ".env"
         if os.path.exists(export_path):
             return
+
+        # Return in the .MER file is incomplete (transmission failure)
+        if not self.mmd_file_is_complete:
+            return
+
         # Write file
         with open(export_path, "w") as f:
             f.write(self.mmd_environment)
@@ -184,18 +237,26 @@ class Dive:
         export_path = self.export_path + self.log_name[:-4] + '.html'
         if os.path.exists(export_path):
             return
+
         # If the float is not diving don't plot anything
         if not self.is_dive:
             return
+
+        # Return in the .MER file is incomplete (transmission failure)
+        if not self.mmd_file_is_complete:
+            return
+
         # Search pressure values
         pressure = utils.find_timestamped_values("P\s*(\+?\-?\d+)mbar", self.log_content)
         bypass = utils.find_timestamped_values(":\[BYPASS", self.log_content)
         valve = utils.find_timestamped_values(":\[VALVE", self.log_content)
         pump = utils.find_timestamped_values(":\[PUMP", self.log_content)
         mermaid_events = utils.find_timestamped_values("[MRMAID,\d+] *\d+dbar, *-?\d+degC", self.log_content)
+
         # Return if there is no data to plot
         if len(pressure) < 1:
             return
+
         # Add pressure values to the graph
         p_val = [-int(p[0])/100. for p in pressure]
         p_date = [p[1] for p in pressure]
@@ -210,6 +271,7 @@ class Dive:
         # Find minimum and maximum for Y axis of vertical lines
         minimum = min(p_val) + 0.05*min(p_val)
         maximum = 0
+
         # Add bypass lines
         bypass = [bp[1] for bp in bypass]
         bypass_line = utils.plotly_vertical_shape(bypass,
@@ -259,24 +321,24 @@ class Dive:
 
         # Compute clock drift
         if not self.is_dive:
-            # print "WARNING: Events are not part of a dive, don't do clock drift correction for \""\
-            #       + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+            print "WARNING: Events are not part of a dive, don't do clock drift correction for \""\
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
         if not self.is_complete_dive:
             print "WARNING: Events are not part of a complete dive, do not correct clock drift for \""\
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
         if not self.gps_list_is_complete:
             print "WARNING: GPS list is incomplete, do not correct clock drift for \""\
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
         if self.gps_list[-2].clockfreq <= 0:
             print "WARNING: Error with last gps synchronization before diving, do not correct clock drift for \""\
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
         if self.gps_list[-1].clockfreq <= 0:
             print "WARNING: Error with first gps synchronization after ascent, do not correct clock drift for \""\
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Correct clock drift
@@ -284,30 +346,37 @@ class Dive:
             event.correct_clock_drift(self.gps_list[-2], self.gps_list[-1])
 
     def compute_events_station_location(self, next_dive):
+        # Keep tabs on the MER/LOG files that affect the current dive's gps
+        # interpolation (don't set self.next_dive = next_dive because
+        # that creates highly recursive data structures)
+        self.next_dive_exists = True
+        self.next_dive_log_name = next_dive.log_name
+        self.next_dive_mmd_environment_name = next_dive.mmd_environment_name
+
         # Check if the dive is complete
         if not self.is_complete_dive:
             # print "WARNING: The dive is not complete, do not compute event location estimation for \""\
-            #       + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+            #       + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Check if the dive contain enough gps fix
         if len(self.gps_list) <= 1:
             print "WARNING: The current dive doesn't contain enough GPS fix,""" \
                   + " do not compute event location estimation for \"" \
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Check if the next dive contain gps fix
         if len(next_dive.gps_list) <= 1:
             print "WARNING: The next dive doesn't contain enough GPS fix,""" \
                   + " do not compute event location estimation for \"" \
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Warning GPS list is incomplete, do not compute event location
         if not self.gps_list_is_complete:
             print "WARNING: GPS list is incomplete, do not compute event location for \""\
-                  + str(self.mmd_name) + "\", \"" + str(self.log_name) + "\""
+                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Split the GPS list: the final GPS location in the .MER file is from
@@ -322,23 +391,16 @@ class Dive:
         # there are still less than two GPS fixes before or after the dive,
         # return early because we cannot compute an interpolated location.
         if len(gps_before_dive) < 2 and self.gps_list[0].source == 'mer':
-            self.gps_list = gps.get_gps_list(self.log_content, None, None)
+            self.gps_list = self.gps_from_log
             gps_before_dive = self.gps_list[:-1]
 
         if len(gps_after_dive) < 2 and self.gps_list[0].source == 'mer':
-            self.gps_list = gps.get_gps_list(self.log_content, None, None)
+            self.gps_list = self.gps_from_log
             gps_after_dive = [self.gps_list[-1]] + next_dive.gps_list[:-1]
 
-        if len(gps_before_dive) >= 2 and len(gps_after_dive) >= 2:
-            self.is_complete_gps_list = True
-        else:
-            print "!!!!_______________________________________________!!!!"
-            print "!!!!                                               !!!!"
-            print "!!!! Less than two GPS fixes before or after dive, !!!!"
-            print "!!!! cannot compute interpolated location:         !!!!"
-            print "!!!! " + self.mmd_name + " and " + self.log_name + "           !!!!"
-            print "!!!!                                               !!!!"
-            print "!!!!_______________________________________________!!!!"
+        if len(gps_before_dive) < 2 or len(gps_after_dive) < 2:
+            print "WARNING: Less than two GPS fixes before or after dive, do not compute event location for \""\
+                  + str(self.mmd_environment_name) + "\", \"" + str(self.log_name) + "\""
             return
 
         # Find location when float leave the surface
@@ -415,19 +477,61 @@ class Dive:
 
     def generate_events_plotly(self):
         for event in self.events:
-            event.plotly(self.export_path)
+            event.plotly(self.export_path, force_with_incomplete_mmd=False)
 
     def generate_events_png(self):
         for event in self.events:
-            event.plot_png(self.export_path)
+            event.plot_png(self.export_path, force_with_incomplete_mmd=False)
 
     def generate_events_sac(self):
         for event in self.events:
-            event.to_sac(self.export_path, self.station_number, force_without_loc=False)
+            event.to_sac(self.export_path, self.station_number, force_without_loc=False, force_with_incomplete_mmd=False)
 
     def generate_events_mseed(self):
         for event in self.events:
-            event.to_mseed(self.export_path, self.station_number, force_without_loc=False)
+            event.to_mseed(self.export_path, self.station_number, force_without_loc=False, force_with_incomplete_mmd=False)
+
+    def print_dive_length(self):
+        dive_length_days = self.dive_length / (60*60*24)
+        print("   Date: {:s} -> {:s} ({:.1f} days; first/last line of {:s})" \
+              .format(str(self.date)[0:19], str(self.end_date)[0:19], dive_length_days, self.log_name))
+
+    def print_dive_gps(self, next_dive):
+        # By definition 1 .LOG == 1 "dive," so there is always a .log file but
+        # not necessarily an associated .MER (e.g., test or init I think?)
+        if self.mmd_environment_name is not None:
+            print("    GPS: {:s} (<ENVIRONMENT/>) & {:s} (this dive)" \
+                  .format(self.mmd_environment_name, self.log_name))
+        else:
+            print("    GPS: {:s} (this dive)".format(self.log_name))
+
+        # Repeat printout for the following dive, whose data affect the gps
+        # interpolation of the current dive
+        if self.next_dive_exists:
+            if self.next_dive_mmd_environment_name is not None:
+                print("         {:s} (<ENVIRONMENT/>) & {:s} (next dive)" \
+                      .format(self.next_dive_mmd_environment_name, self.next_dive_log_name))
+            else:
+                print("         {:s} (next_dive)".format(self.next_dive_log_name))
+        else:
+            print("         (...awaiting next_dive...)")
+
+    def print_dive_events(self):
+        if not self.events:
+            print("  Event: (no detected or requested events fall within the time window of this dive)")
+        else:
+            for e in self.events:
+                if e.station_loc is None:
+                    print("  Event: ! NOT MADE (not enough GPS fixes) {:s}.sac (<EVENT/> binary in {:s})" \
+                          .format(e.get_export_file_name(), e.mmd_data_name))
+                else:
+                    if not e.mmd_file_is_complete:
+                        print("  Event: ! NOT MADE (incomplete .MER file) {:s}.sac (<EVENT/> binary in {:s})" \
+                              .format(e.get_export_file_name(), e.mmd_data_name))
+                    else:
+                        print("  Event: {:s}.sac (<EVENT/> binary in {:s})" \
+                              .format(e.get_export_file_name(), e.mmd_data_name))
+                        self.sac_count += 1
 
 
 # Create dives object
@@ -471,3 +575,32 @@ def concatenate_log_files(path):
                 with open(path + log_file, "w") as fl:
                     fl.write(logstring)
                 logstring = ""
+
+def attach_mmd_is_complete_to_dive_events(dive_list):
+    """Intakes a list of Dive instances and updates their events.mmd_file_is_complete
+    field (events is a list of events associated with each dive).
+
+    More verbose: each Dive instance is associated with a single .MER file via
+    dive.mmd_environment_name in the sense that this is the .MER file whose
+    environment is associated with that dive (the GPS fixes in the environment
+    are similar to the corresponding .LOG file, in dive.log_name).  However, the
+    events (a separate list) attached to this dive may have had their .MER
+    binary data written to a different .MER file.  I.e., the .MER environment
+    does not necessarily correspond to the same file's event data records, and
+    thus .MER data does not necessarily correspond to the last dive.
+
+    """
+
+    # Generate lists of:
+    # (1) all mmd (.MER) files processed
+    # (2) the completeness (or lack thereof) of those same files
+    # and zip them into dictionary for easy reference
+    mmd_environment_names = [o.mmd_environment_name for o in dive_list]
+    mmd_files_are_complete = [o.mmd_file_is_complete for o in dive_list]
+    mmd_dict = dict(zip(mmd_environment_names, mmd_files_are_complete))
+
+    # Attach completeness metric to each event
+    for d in dive_list:
+         for e in d.events:
+            if e.mmd_data_name is not None:
+                e.mmd_file_is_complete = mmd_dict[e.mmd_data_name]
