commit 97d9a56fbb4efece49c7712d7e70dc7aaaff2187
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Mon Oct 5 17:25:03 2020 -0700

    Minor change to GPS printout

diff --git a/scripts/vitals.py b/scripts/vitals.py
index e9da453..7223ee2 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -2,7 +2,6 @@
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
-#
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
 # Last modified by JDS: 01-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit

commit 4515f750830f4b8f3768667ce38c194f1d2f7b59
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Thu Oct 1 14:29:53 2020 -0700

    Header update

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 37aa07a..e9da453 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -1,11 +1,11 @@
-# automaid v1.1.0
+# Part of automaid -- a Python package to process MERMAID files
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 30-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 01-Oct-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import re

commit c9f99e5479d12701485b8520569c96033a23f632
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Wed Sep 30 17:23:22 2020 -0700

    automaid_v1.2.0_dev1 (ammend -- next commit; do for all vit files)
    
    Commit before cleanup and full release of v1.2.0 -- testing now on fresh
    server

diff --git a/scripts/vitals.py b/scripts/vitals.py
index e61de1e..37aa07a 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -5,7 +5,7 @@
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 17-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 30-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import setup
 import re

commit 00a4e886836aa727c47755b89526fe85108e697b
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Thu Sep 17 17:32:01 2020 -0700

    automaid v1.1.0
    
    * v1.1.0: 17-Sep-2020
      -- GPS clock-drift correction added to USER3 variable in SAC header
      -- Packaged version number stored in setup.py and imported in scripts
      -- Fixed tool_invert_mer.py fixed, which now allows flexible path declarations/
         future: apply events.correct_clock_drift?
      -- Forced directory change into $AUTOMAID/scripts/bin/ in
         events.invert_transform to patch issue I0.2.0_1 where the scripts do not
         allow fullpath inputs
      -- Removed local server/ and processed/ directories: those go in $MERMAID

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 4ca7f6b..e61de1e 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -1,17 +1,20 @@
-# automaid v1.0.0
+# automaid v1.1.0
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 11-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 17-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
+import setup
 import re
 from obspy import UTCDateTime
 import plotly.graph_objs as graph
 import plotly.offline as plotly
 
+# Get current version number.
+version = setup.get_version()
 
 def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
     # Read file

commit b905b0f3ff4bddfcb73071bdca023c1f3682ad2d
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Fri Sep 11 14:39:17 2020 -0700

    Fix P-25.vit gps.linear_interpolation crash
    
    Interpolation requires at least two GPS fixes before and after each
    dive; force early return from dives.compute_events_station_location if
    either before/after GPS list is less than length two.

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 941e4f7..4ca7f6b 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -1,4 +1,4 @@
-# automaid v0.3.0
+# automaid v1.0.0
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux

commit e3abed94dc6da8fd87e06860e1efa54a60483c86
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Fri Sep 11 13:46:12 2020 -0700

    automaid v0.3.0: save version number in "KUSER0"

diff --git a/scripts/vitals.py b/scripts/vitals.py
index bf452ae..941e4f7 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -1,11 +1,11 @@
-# automaid v0.2.0
+# automaid v0.3.0
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 09-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 11-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import re
 from obspy import UTCDateTime

commit 468576b3067ff4b2b34df0536667762de33b3297
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Wed Sep 9 12:59:04 2020 -0700

    Define relative paths to code and data

diff --git a/scripts/vitals.py b/scripts/vitals.py
index db3856b..bf452ae 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -1,11 +1,11 @@
-# automaid v0.1.0
+# automaid v0.2.0
 # pymaid environment (Python v2.7)
 #
 # Original author: Sebastien Bonnieux
 #
 # Current maintainer: Dr. Joel D. Simon (JDS)
 # Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
-# Last modified by JDS: 08-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+# Last modified by JDS: 09-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
 
 import re
 from obspy import UTCDateTime

commit 0291364e5d2d64d05e485dd43ecf7a2097429054
Author: Joel D. Simon (Darwin) <jdsimon@princeton.edu>
Date:   Tue Sep 8 12:52:38 2020 -0700

    Add docstring to all Python scripts

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 37911e7..db3856b 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -1,3 +1,12 @@
+# automaid v0.1.0
+# pymaid environment (Python v2.7)
+#
+# Original author: Sebastien Bonnieux
+#
+# Current maintainer: Dr. Joel D. Simon (JDS)
+# Contact: jdsimon@alumni.princeton.edu | joeldsimon@gmail.com
+# Last modified by JDS: 08-Sep-2020, Python 2.7.15, Darwin-18.7.0-x86_64-i386-64bit
+
 import re
 from obspy import UTCDateTime
 import plotly.graph_objs as graph
@@ -23,7 +32,7 @@ def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
     while date[i] < begin and i < len(date)-1:
         i += 1
     j = 0
- 
+
     while date[j] < end and j < len(date)-1:
         j += 1
     date = date[i:j+1]

commit 040f1a5c9995c4f6c25cf10359148753212bbf4a
Merge: 3e8c715 2de926a
Author: Joel D. Simon <jdsimon@princeton.edu>
Date:   Fri Dec 20 07:32:52 2019 -0500

    Pull Seb's from upstream

commit 16aa8348ba96ed8710eb80af24869ce95e5d70dd
Author: sebastienbx <bonnieux@i3s.unice.fr>
Date:   Thu Dec 19 16:48:14 2019 +0100

    Plot last vitals data.

diff --git a/scripts/vitals.py b/scripts/vitals.py
index aaa910a..00e1ea9 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -25,9 +25,9 @@ def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
     j = 0
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
-    voltage = voltage[i:j]
-    minimum_voltage = minimum_voltage[i:j]
+    date = date[i:j+1]
+    voltage = voltage[i:j+1]
+    minimum_voltage = minimum_voltage[i:j+1]
 
     # Add battery values to the graph
     voltage_line = graph.Scatter(x=date,
@@ -77,8 +77,8 @@ def plot_internal_pressure(vital_file_path, vital_file_name, begin, end):
     j = 0
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
-    internal_pressure = internal_pressure[i:j]
+    date = date[i:j+1]
+    internal_pressure = internal_pressure[i:j+1]
 
     # Add battery values to the graph
     internal_pressure_line = graph.Scatter(x=date,
@@ -129,10 +129,10 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     j = 0
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
+    date = date[i:j+1]
     date_rev = date[::-1]
     pressure_offset = pressure_offset[i:j]
-    pressure_offset_range = pressure_offset_range[i:j]
+    pressure_offset_range = pressure_offset_range[i:j+1]
     pressure_offset_max = [x + y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min = [x - y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min_rev = pressure_offset_min[::-1]
@@ -178,8 +178,8 @@ def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
     j = 0
     while date[j] < end and j < len(date)-1:
         j += 1
-    date = date[i:j]
-    pressure_offset = pressure_offset[i:j]
+    date = date[i:j+1]
+    pressure_offset = pressure_offset[i:j+1]
 
     # Add battery values to the graph
     pressure_offset_line = graph.Scatter(x=date,

commit 43688d6e2149da336983f010ba99f915666d7a5d
Author: Frederik J. Simons <fjsimons@gmail.com>
Date:   Fri Sep 6 16:53:22 2019 -0400

    Python and C++ source code (and executables)

diff --git a/scripts/vitals.py b/scripts/vitals.py
index aaa910a..036e6e0 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -23,6 +23,7 @@ def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
     while date[i] < begin and i < len(date)-1:
         i += 1
     j = 0
+ 
     while date[j] < end and j < len(date)-1:
         j += 1
     date = date[i:j]
@@ -171,11 +172,16 @@ def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
     pressure_offset = [dive.p2t_offset_measurement - dive.p2t_offset_param for dive in mdives if dive.is_complete_dive]
     date = [dive.end_date for dive in mdives if dive.is_complete_dive]
 
+    # Dead-float adjustment
+    if len(date) < 1:
+        return
+
     # Get values between the appropriate date
     i = 0
     while date[i] < begin and i < len(date)-1:
         i += 1
     j = 0
+
     while date[j] < end and j < len(date)-1:
         j += 1
     date = date[i:j]
@@ -199,4 +205,4 @@ def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
 
     plotly.plot({'data': data, 'layout': layout},
                 filename=vital_file_path + "corrected_pressure_offset.html",
-                auto_open=False)
\ No newline at end of file
+                auto_open=False)

commit bf6c0f21519b10730197591a061b78f68c609eff
Author: Frederik J. Simons <fjsimons@gmail.com>
Date:   Fri Sep 6 14:47:45 2019 -0400

    Python and C++ source code (and executables)

diff --git a/scripts/vitals.py b/scripts/vitals.py
index ee0bb5e..aaa910a 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -164,3 +164,39 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     plotly.plot({'data': data, 'layout': layout},
                 filename=vital_file_path + "external_pressure_offset.html",
                 auto_open=False)
+
+
+def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
+
+    pressure_offset = [dive.p2t_offset_measurement - dive.p2t_offset_param for dive in mdives if dive.is_complete_dive]
+    date = [dive.end_date for dive in mdives if dive.is_complete_dive]
+
+    # Get values between the appropriate date
+    i = 0
+    while date[i] < begin and i < len(date)-1:
+        i += 1
+    j = 0
+    while date[j] < end and j < len(date)-1:
+        j += 1
+    date = date[i:j]
+    pressure_offset = pressure_offset[i:j]
+
+    # Add battery values to the graph
+    pressure_offset_line = graph.Scatter(x=date,
+                                         y=pressure_offset,
+                                         name="pressure offset",
+                                         line=dict(color='blue',
+                                                   width=2),
+                                         mode='lines')
+
+    data = [pressure_offset_line]
+
+    layout = graph.Layout(title="Corrected pressure offset in LOG files",
+                          xaxis=dict(title='Coordinated Universal Time (UTC)', titlefont=dict(size=18)),
+                          yaxis=dict(title='Pressure offset (millibars)', titlefont=dict(size=18)),
+                          hovermode='closest'
+                          )
+
+    plotly.plot({'data': data, 'layout': layout},
+                filename=vital_file_path + "corrected_pressure_offset.html",
+                auto_open=False)
\ No newline at end of file

commit 5c8be7f972cf1196c1ab1a71373c445a0c071d61
Author: sebastienbx <bonnieux@i3s.unice.fr>
Date:   Wed May 22 16:54:07 2019 +0200

    Plot the corrected pressure offset

diff --git a/scripts/vitals.py b/scripts/vitals.py
index ee0bb5e..aaa910a 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -164,3 +164,39 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     plotly.plot({'data': data, 'layout': layout},
                 filename=vital_file_path + "external_pressure_offset.html",
                 auto_open=False)
+
+
+def plot_corrected_pressure_offset(vital_file_path, mdives, begin, end):
+
+    pressure_offset = [dive.p2t_offset_measurement - dive.p2t_offset_param for dive in mdives if dive.is_complete_dive]
+    date = [dive.end_date for dive in mdives if dive.is_complete_dive]
+
+    # Get values between the appropriate date
+    i = 0
+    while date[i] < begin and i < len(date)-1:
+        i += 1
+    j = 0
+    while date[j] < end and j < len(date)-1:
+        j += 1
+    date = date[i:j]
+    pressure_offset = pressure_offset[i:j]
+
+    # Add battery values to the graph
+    pressure_offset_line = graph.Scatter(x=date,
+                                         y=pressure_offset,
+                                         name="pressure offset",
+                                         line=dict(color='blue',
+                                                   width=2),
+                                         mode='lines')
+
+    data = [pressure_offset_line]
+
+    layout = graph.Layout(title="Corrected pressure offset in LOG files",
+                          xaxis=dict(title='Coordinated Universal Time (UTC)', titlefont=dict(size=18)),
+                          yaxis=dict(title='Pressure offset (millibars)', titlefont=dict(size=18)),
+                          hovermode='closest'
+                          )
+
+    plotly.plot({'data': data, 'layout': layout},
+                filename=vital_file_path + "corrected_pressure_offset.html",
+                auto_open=False)
\ No newline at end of file

commit 99fd458cb4cefc3775f93206c8a4f5257efffa9f
Author: Frederik J. Simons <fjsimons@gmail.com>
Date:   Tue Feb 12 16:18:07 2019 -0500

    Do not plot vital file if there is no data, even after filtering

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 4ebe56d..ee0bb5e 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -111,7 +111,6 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     date = [UTCDateTime(0).strptime(i[0], "%Y%m%d-%Hh%Mmn%S") for i in pressure_offset_catch]
     pressure_offset = [int(i[1]) for i in pressure_offset_catch]
     pressure_offset_range = [int(i[2]) for i in pressure_offset_catch]
-
     if len(date) < 1:
         return
 
@@ -120,6 +119,8 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     pressure_offset = [x[0] for x in res]
     pressure_offset_range = [x[1] for x in res]
     date = [x[2] for x in res]
+    if len(date) < 1:
+        return
 
     # Get values between the appropriate date
     i = 0

commit 59431e9b889c1e08a4ec6094c01aa289a66fa08f
Author: sebastienbx <bonnieux@i3s.unice.fr>
Date:   Fri Jan 11 14:17:48 2019 +0100

    Don't plot vital file if there is no data, even after filtering.

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 4ebe56d..ee0bb5e 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -111,7 +111,6 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     date = [UTCDateTime(0).strptime(i[0], "%Y%m%d-%Hh%Mmn%S") for i in pressure_offset_catch]
     pressure_offset = [int(i[1]) for i in pressure_offset_catch]
     pressure_offset_range = [int(i[2]) for i in pressure_offset_catch]
-
     if len(date) < 1:
         return
 
@@ -120,6 +119,8 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     pressure_offset = [x[0] for x in res]
     pressure_offset_range = [x[1] for x in res]
     date = [x[2] for x in res]
+    if len(date) < 1:
+        return
 
     # Get values between the appropriate date
     i = 0

commit 424f92821083dbfcfe47cdd56453ada6f8fbbe66
Author: sebastienbx <bonnieux@i3s.unice.fr>
Date:   Wed Jul 18 11:55:26 2018 +0200

    Set the transparency in a more compatible way

diff --git a/scripts/vitals.py b/scripts/vitals.py
index b057ee7..4ebe56d 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -149,7 +149,7 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
                                           fill='tozerox',
                                           fillcolor='rgba(0,0,256,0.2)',
                                           name="range",
-                                          line=dict(color='transparent'),
+                                          line=dict(color='rgba(0, 0, 0, 0)'),
                                           showlegend=False)
 
     data = [pressure_offset_line, pressure_offset_range]

commit d8db8f2877c354fae5d51d44a66c870b8128d3fa
Author: bonnieux <bonnieux@i3s.unice.fr>
Date:   Sat May 19 11:24:33 2018 +0200

    Update filtering of wrong values for external pressure plot.
    Print log names during parsing.

diff --git a/scripts/vitals.py b/scripts/vitals.py
index 62c1b58..b057ee7 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -115,6 +115,12 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     if len(date) < 1:
         return
 
+    # Filter wrong values
+    res = [(x, y, z) for x, y, z in zip(pressure_offset, pressure_offset_range, date) if x != -2147483648]
+    pressure_offset = [x[0] for x in res]
+    pressure_offset_range = [x[1] for x in res]
+    date = [x[2] for x in res]
+
     # Get values between the appropriate date
     i = 0
     while date[i] < begin and i < len(date)-1:
@@ -126,11 +132,9 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     date_rev = date[::-1]
     pressure_offset = pressure_offset[i:j]
     pressure_offset_range = pressure_offset_range[i:j]
-    pressure_offset = [x for x in pressure_offset if x != -2147483648]
-    pressure_offset_range = [x for x in pressure_offset_range if x != -1]
     pressure_offset_max = [x + y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min = [x - y for x, y in zip(pressure_offset, pressure_offset_range)]
-    pressure_offset_min = pressure_offset_min[::-1]
+    pressure_offset_min_rev = pressure_offset_min[::-1]
 
     # Add battery values to the graph
     pressure_offset_line = graph.Scatter(x=date,
@@ -141,7 +145,7 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
                                          mode='lines')
 
     pressure_offset_range = graph.Scatter(x=date + date_rev,
-                                          y=pressure_offset_max + pressure_offset_min,
+                                          y=pressure_offset_max + pressure_offset_min_rev,
                                           fill='tozerox',
                                           fillcolor='rgba(0,0,256,0.2)',
                                           name="range",

commit 7c915f129dc853bcd4abdf0e0eb7c7c72f30ca44
Author: bonnieux <bonnieux@i3s.unice.fr>
Date:   Fri Apr 13 15:40:28 2018 +0200

    Remove wrong pressure offset values from the plot.

diff --git a/scripts/vitals.py b/scripts/vitals.py
index bc2c661..62c1b58 100644
--- a/scripts/vitals.py
+++ b/scripts/vitals.py
@@ -126,6 +126,8 @@ def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
     date_rev = date[::-1]
     pressure_offset = pressure_offset[i:j]
     pressure_offset_range = pressure_offset_range[i:j]
+    pressure_offset = [x for x in pressure_offset if x != -2147483648]
+    pressure_offset_range = [x for x in pressure_offset_range if x != -1]
     pressure_offset_max = [x + y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min = [x - y for x, y in zip(pressure_offset, pressure_offset_range)]
     pressure_offset_min = pressure_offset_min[::-1]

commit 9ea3d4559bfd73e93f5991aefd3f657f97160d2c
Author: bonnieux <bonnieux@i3s.unice.fr>
Date:   Tue Apr 10 14:29:00 2018 +0200

    first commit

diff --git a/scripts/vitals.py b/scripts/vitals.py
new file mode 100644
index 0000000..bc2c661
--- /dev/null
+++ b/scripts/vitals.py
@@ -0,0 +1,159 @@
+import re
+from obspy import UTCDateTime
+import plotly.graph_objs as graph
+import plotly.offline as plotly
+
+
+def plot_battery_voltage(vital_file_path, vital_file_name, begin, end):
+    # Read file
+    with open(vital_file_path + vital_file_name, "r") as f:
+        content = f.read()
+
+    # Find battery values
+    battery_catch = re.findall("(.+): Vbat (\d+)mV \(min (\d+)mV\)", content)
+    date = [UTCDateTime(0).strptime(i[0], "%Y%m%d-%Hh%Mmn%S") for i in battery_catch]
+    voltage = [float(i[1])/1000. for i in battery_catch]
+    minimum_voltage = [float(i[2])/1000. for i in battery_catch]
+
+    if len(date) < 1:
+        return
+
+    # Get values between the appropriate date
+    i = 0
+    while date[i] < begin and i < len(date)-1:
+        i += 1
+    j = 0
+    while date[j] < end and j < len(date)-1:
+        j += 1
+    date = date[i:j]
+    voltage = voltage[i:j]
+    minimum_voltage = minimum_voltage[i:j]
+
+    # Add battery values to the graph
+    voltage_line = graph.Scatter(x=date,
+                                 y=voltage,
+                                 name="voltage",
+                                 line=dict(color='blue',
+                                           width=2),
+                                 mode='lines')
+
+    minimum_voltage_line = graph.Scatter(x=date,
+                                         y=minimum_voltage,
+                                         name="minimum voltage",
+                                         line=dict(color='orange',
+                                                   width=2),
+                                         mode='lines')
+
+    data = [voltage_line, minimum_voltage_line]
+
+    layout = graph.Layout(title="Battery level in \"" + vital_file_name + "\"",
+                          xaxis=dict(title='Coordinated Universal Time (UTC)', titlefont=dict(size=18)),
+                          yaxis=dict(title='Voltage (Volts)', titlefont=dict(size=18)),
+                          hovermode='closest'
+                          )
+
+    plotly.plot({'data': data, 'layout': layout},
+                filename=vital_file_path + "voltage.html",
+                auto_open=False)
+
+
+def plot_internal_pressure(vital_file_path, vital_file_name, begin, end):
+    # Read file
+    with open(vital_file_path + vital_file_name, "r") as f:
+        content = f.read()
+
+    # Find battery values
+    internal_pressure_catch = re.findall("(.+): Pint (-?\d+)Pa", content)
+    date = [UTCDateTime(0).strptime(i[0], "%Y%m%d-%Hh%Mmn%S") for i in internal_pressure_catch]
+    internal_pressure = [float(i[1])/100. for i in internal_pressure_catch]
+
+    if len(date) < 1:
+        return
+
+    # Get values between the appropriate date
+    i = 0
+    while date[i] < begin and i < len(date)-1:
+        i += 1
+    j = 0
+    while date[j] < end and j < len(date)-1:
+        j += 1
+    date = date[i:j]
+    internal_pressure = internal_pressure[i:j]
+
+    # Add battery values to the graph
+    internal_pressure_line = graph.Scatter(x=date,
+                                           y=internal_pressure,
+                                           name="internal pressure",
+                                           line=dict(color='blue',
+                                                     width=2),
+                                           mode='lines')
+
+    data = [internal_pressure_line]
+
+    layout = graph.Layout(title="Internal pressure in \"" + vital_file_name + "\"",
+                          xaxis=dict(title='Coordinated Universal Time (UTC)', titlefont=dict(size=18)),
+                          yaxis=dict(title='Internal pressure (millibars)', titlefont=dict(size=18)),
+                          hovermode='closest'
+                          )
+
+    plotly.plot({'data': data, 'layout': layout},
+                filename=vital_file_path + "internal_pressure.html",
+                auto_open=False)
+
+
+def plot_pressure_offset(vital_file_path, vital_file_name, begin, end):
+    # Read file
+    with open(vital_file_path + vital_file_name, "r") as f:
+        content = f.read()
+
+    # Find battery values
+    pressure_offset_catch = re.findall("(.+): Pext (-?\d+)mbar \(range (-?\d+)mbar\)", content)
+    date = [UTCDateTime(0).strptime(i[0], "%Y%m%d-%Hh%Mmn%S") for i in pressure_offset_catch]
+    pressure_offset = [int(i[1]) for i in pressure_offset_catch]
+    pressure_offset_range = [int(i[2]) for i in pressure_offset_catch]
+
+    if len(date) < 1:
+        return
+
+    # Get values between the appropriate date
+    i = 0
+    while date[i] < begin and i < len(date)-1:
+        i += 1
+    j = 0
+    while date[j] < end and j < len(date)-1:
+        j += 1
+    date = date[i:j]
+    date_rev = date[::-1]
+    pressure_offset = pressure_offset[i:j]
+    pressure_offset_range = pressure_offset_range[i:j]
+    pressure_offset_max = [x + y for x, y in zip(pressure_offset, pressure_offset_range)]
+    pressure_offset_min = [x - y for x, y in zip(pressure_offset, pressure_offset_range)]
+    pressure_offset_min = pressure_offset_min[::-1]
+
+    # Add battery values to the graph
+    pressure_offset_line = graph.Scatter(x=date,
+                                         y=pressure_offset,
+                                         name="pressure offset",
+                                         line=dict(color='blue',
+                                                   width=2),
+                                         mode='lines')
+
+    pressure_offset_range = graph.Scatter(x=date + date_rev,
+                                          y=pressure_offset_max + pressure_offset_min,
+                                          fill='tozerox',
+                                          fillcolor='rgba(0,0,256,0.2)',
+                                          name="range",
+                                          line=dict(color='transparent'),
+                                          showlegend=False)
+
+    data = [pressure_offset_line, pressure_offset_range]
+
+    layout = graph.Layout(title="External pressure offset in \"" + vital_file_name + "\"",
+                          xaxis=dict(title='Coordinated Universal Time (UTC)', titlefont=dict(size=18)),
+                          yaxis=dict(title='Pressure offset (millibars)', titlefont=dict(size=18)),
+                          hovermode='closest'
+                          )
+
+    plotly.plot({'data': data, 'layout': layout},
+                filename=vital_file_path + "external_pressure_offset.html",
+                auto_open=False)
